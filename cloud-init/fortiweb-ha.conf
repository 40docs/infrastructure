Content-Type: multipart/mixed; boundary="===============1234567890=="
MIME-Version: 1.0

--===============1234567890==
Content-Type: text/x-shellscript; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="init.sh"

#!/bin/bash
#===============================================================================
# FortiWeb High Availability Cloud-Init Configuration
# 
# This script configures FortiWeb instances for HA deployment with:
# - Cluster configuration (primary/secondary)
# - Health monitoring endpoints
# - Automated failover setup
# - Enhanced logging and monitoring
#===============================================================================

# Enhanced logging
exec > >(tee -a /var/log/fortiweb-init.log)
exec 2>&1
echo "[$(date '+%Y-%m-%d %H:%M:%S')] Starting FortiWeb HA initialization..."

# Wait for FortiWeb to be ready
wait_for_fortiweb() {
    local max_attempts=60
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s -k https://localhost:8080/login > /dev/null 2>&1; then
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] FortiWeb is ready (attempt $attempt)"
            return 0
        fi
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] Waiting for FortiWeb... (attempt $attempt)"
        sleep 10
        ((attempt++))
    done
    
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: FortiWeb failed to start after $max_attempts attempts"
    return 1
}

# Configure HA cluster
configure_ha_cluster() {
    local role="${var_instance_role}"
    local priority="${var_cluster_priority}"
    local peer_ip="${var_peer_ip}"
    
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Configuring HA cluster - Role: $role, Priority: $priority"
    
    # HA configuration via CLI (pseudo-code - adapt to actual FortiWeb CLI)
    cat > /tmp/ha_config.conf << EOF
config system ha
    set mode active-passive
    set group-name "40docs-cluster"
    set priority $priority
    set override enable
    set unicast-hb enable
    set unicast-hb-peerip $peer_ip
    set unicast-hb-netmask 255.255.255.0
    set hb-interval 10
    set hb-lost-threshold 3
end
EOF

    # Apply configuration (adapt to actual FortiWeb CLI commands)
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Applying HA configuration..."
    # fortiweb-cli -f /tmp/ha_config.conf
}

# Configure health check endpoint
configure_health_check() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Configuring health check endpoint..."
    
    # Create health check endpoint
    cat > /tmp/health_config.conf << EOF
config system health-check
    set status enable
    set port 8080
    set uri "/healthcheck"
    set method GET
    set response-code 200
    set response-body "OK"
end
EOF

    # Apply health check configuration
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Applying health check configuration..."
    # fortiweb-cli -f /tmp/health_config.conf
}

# Configure monitoring and logging
configure_monitoring() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Configuring enhanced monitoring..."
    
    # Enable comprehensive logging
    cat > /tmp/logging_config.conf << EOF
config log setting
    set status enable
    set server-type disk
    set log-policy enable
    set attack-log enable
    set traffic-log enable
    set event-log enable
end
EOF

    # Configure SNMP for monitoring
    cat > /tmp/snmp_config.conf << EOF
config system snmp sysinfo
    set status enable
    set description "FortiWeb HA Instance - ${var_instance_role}"
    set location "Azure Zone $${var_instance_zone:-single}"
    set contact-info "admin@${var_dns_zone}"
end
EOF

    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Applying monitoring configuration..."
    # fortiweb-cli -f /tmp/logging_config.conf
    # fortiweb-cli -f /tmp/snmp_config.conf
}

# Main execution flow
main() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Starting FortiWeb HA configuration..."
    
    # Wait for FortiWeb to be ready
    if ! wait_for_fortiweb; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] FATAL: FortiWeb initialization failed"
        exit 1
    fi
    
    # Configure HA cluster if peer IP is provided
    if [ -n "${var_peer_ip}" ]; then
        configure_ha_cluster
    else
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] Single instance mode - skipping HA configuration"
    fi
    
    # Configure health check endpoint
    configure_health_check
    
    # Configure monitoring
    configure_monitoring
    
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] FortiWeb HA initialization completed successfully"
}

# Execute main function
main "$@"

--===============1234567890==
Content-Type: text/cloud-config; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment; filename="cloud-config.yaml"

#cloud-config
#===============================================================================
# FortiWeb Cloud Configuration
#===============================================================================

# Set timezone
timezone: UTC

# Update system packages
package_update: true
package_upgrade: false

# Install additional monitoring tools
packages:
  - curl
  - htop
  - tcpdump
  - net-tools

# Create monitoring user
users:
  - name: fwbmonitor
    groups: sudo
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    lock_passwd: true
    ssh_authorized_keys:
      - ${var_privatekey}

# Write configuration files
write_files:
  - path: /etc/fortiweb/instance-info
    content: |
      INSTANCE_ROLE=${var_instance_role}
      CLUSTER_PRIORITY=${var_cluster_priority}
      PEER_IP=${var_peer_ip}
      DNS_ZONE=${var_dns_zone}
      INIT_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
    permissions: '0644'
    owner: root:root

  - path: /etc/systemd/system/fortiweb-monitor.service
    content: |
      [Unit]
      Description=FortiWeb Health Monitor
      After=network.target
      
      [Service]
      Type=simple
      User=fwbmonitor
      ExecStart=/usr/local/bin/fortiweb-monitor.sh
      Restart=always
      RestartSec=30
      
      [Install]
      WantedBy=multi-user.target
    permissions: '0644'
    owner: root:root

  - path: /usr/local/bin/fortiweb-monitor.sh
    content: |
      #!/bin/bash
      #===============================================================================
      # FortiWeb Health Monitor Service
      #===============================================================================
      
      HEALTH_CHECK_URL="http://localhost:8080/healthcheck"
      LOG_FILE="/var/log/fortiweb-monitor.log"
      CHECK_INTERVAL=30
      
      # Enhanced logging function
      log_message() {
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
      }
      
      # Health check function
      check_health() {
          local response=$(curl -s -w "%%{http_code}" -o /dev/null "$HEALTH_CHECK_URL" --max-time 10)
          
          if [ "$response" = "200" ]; then
              log_message "INFO: Health check passed (HTTP 200)"
              return 0
          else
              log_message "ERROR: Health check failed (HTTP $response)"
              return 1
          fi
      }
      
      # Main monitoring loop
      log_message "INFO: Starting FortiWeb health monitor..."
      
      while true; do
          if check_health; then
              # Additional system checks
              MEMORY_USAGE=$(free | grep Mem | awk '{printf("%.1f", ($3/$2) * 100.0)}')
              CPU_LOAD=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
              
              log_message "INFO: System healthy - Memory: ${MEMORY_USAGE}%, Load: ${CPU_LOAD}"
          else
              log_message "WARN: Health check failed - investigating..."
              # Add remediation logic here if needed
          fi
          
          sleep $CHECK_INTERVAL
      done
    permissions: '0755'
    owner: fwbmonitor:fwbmonitor

# Run final commands
runcmd:
  - systemctl daemon-reload
  - systemctl enable fortiweb-monitor.service
  - systemctl start fortiweb-monitor.service
  - echo "FortiWeb HA cloud-init configuration completed" >> /var/log/fortiweb-init.log

--===============1234567890==--