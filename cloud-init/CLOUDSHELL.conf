#cloud-config

timezone: America/Toronto
package_update: true
package_upgrade: true
package_reboot_if_required: true

power_state:
  delay: now
  mode: reboot
  message: Rebooting after cloud-init
  timeout: 30
  condition: true

bootcmd:
  - mkdir -p /home /var/lib/docker /root/.ollama
  - |
    format_and_mount() {
      local lun="$1" label="$2" mount_point="$3" always_format="$4"
      local dev="/dev/disk/azure/scsi1/lun$${lun}"
      local part="$${dev}-part1"

      for i in $(seq 1 30); do
        if [ -b "$dev" ]; then
          echo "[INFO] $dev detected."
          break
        fi
        sleep 2
      done

      if [ "$always_format" = "yes" ]; then
        echo "[INFO] Formatting $dev (forced) for $mount_point ..."
        wipefs -a "$dev" 2>/dev/null || true  # Complete filesystem signature wipe
        parted -s "$dev" mklabel gpt mkpart primary ext4 0% 100%
        mkfs.ext4 -F "$part" -L "$label"
      else
        if ! blkid "$part" >/dev/null 2>&1; then
          echo "[INFO] No filesystem on $dev — formatting for $mount_point ..."
          parted -s "$dev" mklabel gpt mkpart primary ext4 0% 100%
          mkfs.ext4 -F "$part" -L "$label"
        else
          echo "[INFO] Filesystem already exists on $dev — preserving data."
        fi
      fi

      # Mount will be handled by the mounts: section
    }

    format_and_mount 0 homefs /home yes
    format_and_mount 1 dockerfs /var/lib/docker no
    format_and_mount 2 ollamafs /root/.ollama no

mounts:
  - [ "LABEL=homefs", "/home", "ext4", "defaults,nofail", "0", "2" ]
  - [ "LABEL=dockerfs", "/var/lib/docker", "ext4", "defaults,nofail", "0", "2" ]
  - [ "LABEL=ollamafs", "/root/.ollama", "ext4", "defaults,nofail", "0", "2" ]

ssh_deletekeys: false
ssh_keys:
  rsa_private: |
    ${indent(4, var_ssh_host_rsa_private)}
  rsa_public: |
    ${indent(4, var_ssh_host_rsa_public)}
  ecdsa_private: |
    ${indent(4, var_ssh_host_ecdsa_private)}
  ecdsa_public: |
    ${indent(4, var_ssh_host_ecdsa_public)}
  ed25519_private: |
    ${indent(4, var_ssh_host_ed25519_private)}
  ed25519_public: |
    ${indent(4, var_ssh_host_ed25519_public)}

apt:
  sources:
    authd:
      source: ppa:ubuntu-enterprise-desktop/authd
    dotnet:
      source: ppa:dotnet/backports
    ansible:
      source: ppa:ansible/ansible
    nvtop:
      source: ppa:quentiumyt/nvtop
    nvidia:
      source: ppa:graphics-drivers/ppa
    trivy:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://get.trivy.dev/deb generic main
      keyserver: https://get.trivy.dev/deb/public.key
      keyid: E9D0A3616276FA6C
    hashicorp:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://apt.releases.hashicorp.com $RELEASE main
      keyserver: https://apt.releases.hashicorp.com/gpg
      keyid: AA16FCBCA621E701
    github-cli:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://cli.github.com/packages stable main
      keyserver: https://cli.github.com/packages/githubcli-archive-keyring.gpg
      keyid: 23F3D4EA75716059
    google-cloud-sdk:
      source: deb [arch=amd64 signed-by=$KEY_FILE] http://packages.cloud.google.com/apt cloud-sdk main
      keyserver: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      keyid: C0BA5CE6DC6315A3
    google-chrome:
      source: deb [arch=amd64 signed-by=$KEY_FILE] http://dl.google.com/linux/chrome/deb/ stable main
      keyserver: https://dl-ssl.google.com/linux/linux_signing_key.pub
      keyid: 7721F63BD38B4796
    docker:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://download.docker.com/linux/ubuntu noble stable
      keyserver: https://download.docker.com/linux/ubuntu/gpg
      keyid: 8D81803C0EBFCD88
    nvidia-container-toolkit:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://nvidia.github.io/libnvidia-container/stable/deb/$(ARCH) /
      keyserver: https://nvidia.github.io/libnvidia-container/gpgkey
      keyid: DDCAE044F796ECB0
    azure-cli:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://packages.microsoft.com/repos/azure-cli/ $RELEASE main
      keyserver: https://packages.microsoft.com/keys/microsoft.asc
      keyid: EB3E94ADBE1229CF
    vscode:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://packages.microsoft.com/repos/vscode stable main
      keyserver: https://packages.microsoft.com/keys/microsoft.asc
      keyid: EB3E94ADBE1229CF
    powershell:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://packages.microsoft.com/ubuntu/24.04/prod $RELEASE main
      keyserver: https://packages.microsoft.com/keys/microsoft.asc
      keyid: EB3E94ADBE1229CF
    ubuntu-universe:
      source: "deb http://archive.ubuntu.com/ubuntu $RELEASE universe"
    ubuntu-multiverse:
      source: "deb http://archive.ubuntu.com/ubuntu $RELEASE multiverse"

write_files:
  - path: /etc/ssh/sshd_config.d/custom.conf
    content: |
      UsePAM yes
      KbdInteractiveAuthentication yes
      PrintMotd no
      PrintLastLog no
      UseDNS no
  - path: /root/prewarm-cache.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/bin/bash
      set -euxo pipefail
      # Wait for VS Code installation to complete and be available
      for i in {1..30}; do
        if command -v code >/dev/null 2>&1; then
          break
        fi
        echo "Waiting for VS Code to be available... (attempt $i/30)"
        sleep 2
      done

      # Check if VS Code is available before proceeding
      if ! command -v code >/dev/null 2>&1; then
        echo "VS Code not available, skipping extension prewarming"
        exit 0
      fi

      # Check if extensions.json exists
      if [ ! -f "$HOME/40docs/.vscode/extensions.json" ]; then
        echo "Extensions file not found, skipping extension prewarming"
        exit 0
      fi

      EXT_LIST=$(jq -r ".recommendations[]" "$HOME/40docs/.vscode/extensions.json")
      for EXT in $EXT_LIST; do
        code --install-extension "$EXT" --force \
             --user-data-dir "$HOME/.vscode-server/data" \
             --extensions-dir "$HOME/.vscode-server/extensions"
        code-insiders --install-extension "$EXT" --force \
             --user-data-dir "$HOME/.vscode-server-insiders/data" \
             --extensions-dir "$HOME/.vscode-server-insiders/extensions"
      done
      DISPLAY="" code --no-sandbox \
          --user-data-dir "$HOME/.vscode-server/data" \
          --extensions-dir "$HOME/.vscode-server/extensions" \
          --skip-welcome --skip-release-notes --disable-telemetry || true
      DISPLAY="" code-insiders --no-sandbox \
          --user-data-dir "$HOME/.vscode-server-insiders/data" \
          --extensions-dir "$HOME/.vscode-server-insiders/extensions" \
          --skip-welcome --skip-release-notes --disable-telemetry || true
  - path: /etc/profile.d/nvm.sh
    owner: root:root
    permissions: '0644'
    content: |
      export NVM_DIR=/usr/local/nvm
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
  - path: /etc/profile.d/nvidia.sh
    owner: root:root
    permissions: '0644'
    content: |
      # NVIDIA GPU environment variables
      export NVIDIA_VISIBLE_DEVICES=all
      export NVIDIA_DRIVER_CAPABILITIES=all
      export CUDA_VISIBLE_DEVICES=all
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
  - path: /root/.lacework.toml
    content: |
      [default]
        account = "${var_forticnapp_account}"
        subaccount = "${var_forticnapp_subaccount}"
        api_key = "${var_forticnapp_api_key}"
        api_secret = "${var_forticnapp_api_secret}"
        version = 2
  - path: /root/npm-install.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/bin/bash
      set -euo pipefail
      IFS=$'\n\t'

      # Config
      NVM_DIR="/usr/local/nvm"
      NODE_VERSION="v24.4.1"

      # Install or update NVM
      if [[ ! -d "$${NVM_DIR}/.git" ]]; then
        git clone --quiet https://github.com/nvm-sh/nvm.git "$${NVM_DIR}"
      else
        git -C "$${NVM_DIR}" pull --quiet || true
      fi

      # shellcheck disable=SC1090
      . "$${NVM_DIR}/nvm.sh"

      # Remove npm prefix conflicts
      unset NPM_CONFIG_PREFIX
      export npm_config_prefix=""
      export npm_config_globalconfig=""

      # Remove problematic .npmrc
      if [[ -f "/root/.npmrc" ]]; then
        mv /root/.npmrc "/root/.npmrc.bak"
      fi

      # Install Node.js LTS and set default
      nvm install node --silent
      nvm alias default node
      nvm use default --delete-prefix --silent

      # Try specific Node version if available
      if ! nvm use --delete-prefix "$${NODE_VERSION}" --silent; then
        echo "[WARN] Node $${NODE_VERSION} not installed, sticking with LTS" >&2
      fi

      # Set npm log level to basic info
      npm config set loglevel info

      # Global npm packages
      GLOBAL_NPM_PACKAGES=(
        @anaisbetts/mcp-installer
        @modelcontextprotocol/server-memory
        @modelcontextprotocol/server-filesystem
        @modelcontextprotocol/server-brave-search
        @modelcontextprotocol/server-sqlite
        @modelcontextprotocol/server-sequential-thinking
        @azure/mcp@latest
        @21st-dev/magic@latest
        bash-language-server
        claude-auto-commit
        cwebp
        @devcontainers/cli
        dockerfile-language-server-nodejs
        eslint
        eslint-config-prettier
        gatsby-cli
        javascript-typescript-langserver
        jsonlint
        markdownlint
        markdownlint-cli
        markdownlint-cli2
        newman
        opal-security
        playwright
        prettier
        puppeteer
        setup-eslint-config
        sql-language-server
        stylelint-config-prettier
        svgo
        terminalizer
        unified-language-server
        vscode-css-languageserver-bin
        vscode-html-languageserver-bin
        vscode-json-languageserver-bin
        yaml-language-server
      )

      CXXFLAGS="--std=gnu++20" npm install --location=global --no-save "$${GLOBAL_NPM_PACKAGES[@]}"

      playwright install --with-deps chromium >/dev/null 2>&1

      # Clean up unwanted files like '=0.22'
      find / -maxdepth 1 -type f \( -name "=0.22" -o -name "=1.12" -o -name "=2.0" -o -name "'=0.22'" \) -delete 2>/dev/null || true

packages:
  - alsa-utils
  - apt-file
  - ansible
  - ansible-lint
  - apache2-utils
  - apparmor
  - apt-transport-https
  - asciidoctor
  - aspnetcore-runtime-9.0
  - autoconf
  - azure-cli
  - bash-completion
  - bat
  - build-essential
  - cabextract
  - ca-certificates
  - cockpit
  - code
  - code-insiders
  - cmake
  - curl
  - dos2unix
  - docker-ce
  - docker-ce-cli
  - containerd.io
  - docker-compose-plugin
  - docker-ce-rootless-extras
  - docker-buildx-plugin
  - dotnet-sdk-9.0
  - dotnet-sdk-8.0
  - dotnet-sdk-6.0
  - dpkg
  - dpkg-dev
  - dnsutils
  - ffmpeg
  - file
  - fontconfig
  - fonts-powerline
  - frei0r-plugins
  - fuse3
  - fzf
  - g++
  - gh
  - gnupg
  - golang-go
  - graphviz
  - gstreamer1.0-libav
  - gstreamer1.0-vaapi
  - gstreamer1.0-plugins-base
  - gstreamer1.0-plugins-good
  - gstreamer1.0-plugins-bad
  - gstreamer1.0-plugins-ugly
  - google-cloud-cli
  - google-chrome-stable
  - hwloc
  - imagemagick
  - inkscape
  - iputils-ping
  - kubectl
  - ladspa-sdk
  - libapache2-mod-php
  - libavif-dev
  - libc6
  - libfuse3-3
  - libgcc-s1
  - libgstreamer1.0-0
  - libicu74
  - liblttng-ust1t64
  - libappindicator3-1
  - libdbusmenu-glib4
  - libdbusmenu-gtk3-4
  - libfftw3-bin
  - libfftw3-dev
  - libfftw3-long3
  - libfftw3-quad3
  - libfftw3-single3
  - libfuse2t64
  - libgavl2
  - libgl1-mesa-dri
  - libgl1
  - libgif-dev
  - libglu1-mesa
  - libhwloc-dev
  - libhwloc15
  - libicu-dev
  - libmovit-dev
  #- libnvidia-container-tools
  #- libnvidia-container1
  #- libnvidia-encode1
  #- libnvcuvid1
  #- libnvidia-decode-575
  #- libnvidia-decode-575-server
  - libnotify4
  - libnuma-dev
  - libpoppler-cpp-dev
  - librust-gdk-pixbuf-sys-dev
  - libsecret-1-0
  - libsecret-1-dev
  - libsecret-common
  - libsox-fmt-all
  - libstdc++6
  - libssl3t64
  - libslirp0
  - libglx-mesa0
  - libunwind8
  - libvulkan1
  - libvidstab-dev
  - libyelp-dev
  - locales
  - locales-all
  - lsb-release
  - lsd
  - make
  - melt
  - mesa-utils
  - mesa-utils-bin
  - mesa-vulkan-drivers
  - mtr
  - nmap
  - npm
  - nvidia-driver-575
  - nvidia-container-toolkit
  - nvtop
  - php
  - php-cli
  - php-cgi
  - php-mysql
  - php-pgsql
  - pigz
  - pkexec
  - pkg-config
  - policykit-1
  - postgresql
  - postgresql-contrib
  - poppler-utils
  - powershell
  - python3-full
  - python3-pip
  - python3-venv
  - shellcheck
  - skopeo
  - slirp4netns
  - snapd
  - software-properties-common
  - squashfs-tools
  - swh-plugins
  - sox
  - sqlite3
  - terraform
  - tesseract-ocr
  - tini
  - tcpdump
  - tofrodos
  - trivy
  - ubuntu-drivers-common
  - unzip
  - vlc
  - vim-syntastic
  - weasyprint
  - xvfb
  - xdg-utils
  - yq
  - yamllint
  - yelp-tools
  - zsh
  - zlib1g

runcmd:
  - echo "runcmd executed at $(date)"
  - |
    DEBIAN_FRONTEND=noninteractive apt install authd -y
    snap install authd-msentraid
    systemctl stop authd authd.socket ssh systemd-logind ssh.socket
    snap stop authd-msentraid
    mkdir -p /etc/authd/brokers.d/
    chmod 700 /etc/authd
    chmod 700 /etc/authd/brokers.d
    cp /snap/authd-msentraid/current/conf/authd/msentraid.conf /etc/authd/brokers.d/msentraid.conf
    sed -i \
      -e 's|issuer = https://login.microsoftonline.com/<ISSUER_ID>/v2.0|issuer = "https://login.microsoftonline.com/${var_directory_tenant_id}/v2.0"|' \
      -e 's|client_id = <CLIENT_ID>|client_id = "${var_directory_client_id}"|' \
      /var/snap/authd-msentraid/current/broker.conf
    sed -i 's/^#allowed_users = OWNER$/allowed_users = ALL/' /var/snap/authd-msentraid/current/broker.conf
    echo 'ssh_allowed_suffixes = @fortinet-us.com' >> /var/snap/authd-msentraid/current/broker.conf
    rm -rf /var/lib/authd
    mkdir -p /var/lib/authd
    chmod 700 /var/lib/authd
    systemctl start authd
    timeout 10 bash -c 'until systemctl is-active --quiet authd; do sleep 0.5; done' || echo "authd not yet active, proceeding..."
    snap start authd-msentraid
    systemctl start ssh systemd-logind ssh.socket
  - |
    systemctl stop systemd-logind || true
    systemctl stop getty@tty1.service || true
    umount /etc/skel || true
    umount /home/.skel || true
    rm -rf /etc/skel /home/.skel
    mkdir -p /etc/skel /home/.skel
    chmod 755 /etc/skel /home/.skel
    chown root:root /etc/skel /home/.skel
    # Add bind mount to /etc/fstab if not already there
    if ! grep -q "/home/.skel /etc/skel" /etc/fstab; then
      echo "/home/.skel /etc/skel none bind 0 0" >> /etc/fstab
    fi
    mount --bind /home/.skel /etc/skel
    systemctl start systemd-logind || true
  - |
    OS=$(go env GOOS); ARCH=$(go env GOARCH); curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_$${OS}_$${ARCH}
    chmod +x cmctl
    mv cmctl /usr/local/bin
  - |
    curl -fsSL -o /tmp/get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    chmod 700 /tmp/get_helm.sh
    export HOME=/root && /tmp/get_helm.sh
    rm -f /tmp/get_helm.sh
    mkdir -p /root/.local/state/vs-kubernetes/tools/helm/linux-amd64
    ln -s /usr/local/bin/helm /root/.local/state/vs-kubernetes/tools/helm/linux-amd64/helm
  - |
    git clone --recurse-submodules https://github.com/40docs/.github.git /root/40docs
    cd /root/40docs
    chmod +x ./install.sh
    ./install.sh
    cd -
  - |
    git clone https://github.com/40docs/dotfiles.git /root/dotfiles
    cd /root/dotfiles
    export DOTFILES_USER=root
    export HOME=/root
    chmod +x ./install.sh
    ./install.sh
    cd -
  - |
    mkdir -p /root/.kube/
    echo "${var_kubeconfig}" | base64 -d > /root/.kube/config
    chmod 400 /root/.kube/config
    chmod 500 /root/.kube/
    echo 'export KUBECONFIG=$HOME/.kube/config' >> /root/.bashrc
    echo 'export KUBECONFIG=$HOME/.kube/config' >> /root/.profile
    echo 'export KUBECONFIG=$HOME/.kube/config' >> /root/.zshrc
  - useradd -D -s "$(which zsh)"
  - sed -i -E 's|^#?DSHELL=.*|DSHELL=/usr/bin/zsh|' /etc/adduser.conf
  - |
    echo 'ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true' | debconf-set-selections
    DEBIAN_FRONTEND=noninteractive apt-get update -qq
    DEBIAN_FRONTEND=noninteractive apt-get full-upgrade -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y ttf-mscorefonts-installer ubuntu-restricted-extras libavcodec-extra libavcodec-extra60 ubuntu-restricted-addons unrar
    dpkg --configure -a
    apt-get install -f -y
  - python3 -m pip install --break-system-packages --ignore-installed numpy>=2.0 uvicorn>=0.22 scipy>=1.12 aider-install azure-cognitiveservices-speech black checkov docs-chat-bot fastapi gitlint git-filter-repo google-api-python-client qrcode[pil] markitdown mkdocs-add-teaser mkdocs-awesome-pages-plugin mkdocs-childpages-card-grid-plugin mkdocs-enumerate-headings-plugin mkdocs-exclude mkdocs-git-authors-plugin mkdocs-git-committers-plugin-2 mkdocs-github-admonitions-plugin mkdocs-git-revision-date-localized-plugin mkdocs-glightbox mkdocs-literate-nav mkdocs-material 'mkdocs-material[imaging]' mkdocs-minify-plugin mkdocs-monorepo-plugin mkdocs-pdf-export-plugin mkdocs-same-dir mkdocs-section-index mkdocs-table-reader-plugin mkdocs-with-pdf 'mkdocstrings[crystal]' 'mkdocstrings[python]' oauth2client oterm pre-commit progressbar2 pydantic powerline-shell uv SuperClaude
  - |
    mkdir -p "/usr/share/fonts/powerline"
    curl -L https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf -o /usr/share/fonts/powerline/PowerlineSymbols.otf
    mkdir -p /etc/fonts/conf.avail
    curl -L https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf -o /etc/fonts/conf.avail/10-powerline-symbols.conf
    fc-cache -f /usr/share/fonts
  - |
    export HOME=/root
    curl https://raw.githubusercontent.com/lacework/go-sdk/main/cli/install.sh | bash -s --
    echo 'source <(lacework completion bash)' >> /root/.bashrc
    echo 'export OLLAMA_API_BASE=http://127.0.0.1:11434' >> /root/.bashrc
    lacework component install sca
    lacework component install iac
    lacework component install remediate
    lacework component install vuln-scanner
    mkdir /root/tmp && cd /root/tmp && lacework iac scan && cd -
  - curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash -s --
  - |
    export HOME=/root/.ollama && curl -fsSL https://ollama.com/install.sh | sh
    systemctl start ollama.service
    systemctl enable ollama.service
    ollama pull deepseek-r1:latest
    ollama pull gpt-oss:20b
    echo 'export OLLAMA_API_BASE=http://127.0.0.1:11434' >> /root/.zshrc
    echo 'export OLLAMA_API_BASE=http://127.0.0.1:11434' >> /root/.bashrc
    echo 'export BRAVE_API_KEY="${var_brave_api_key}"' >> /root/.bashrc
    echo 'export BRAVE_API_KEY="${var_brave_api_key}"' >> /root/.zshrc
    echo 'export PERPLEXITY_API_KEY="${var_perplexity_api_key}"' >> /root/.bashrc
    echo 'export PERPLEXITY_API_KEY="${var_perplexity_api_key}"' >> /root/.zshrc
  - curl -s https://fluxcd.io/install.sh | bash -s --
  #- curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  #- install -o root -g root -m 0755 kubectl /usr/bin/kubectl
  - |
    mkdir -p /root/.local/state/vs-kubernetes/tools/kubectl/
    ln -s `which kubectl` /root/.local/state/vs-kubernetes/tools/kubectl/kubectl
  - curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/nektos/act/master/install.sh | bash -s -- -b /usr/local/bin
  - |
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
    unzip -q /tmp/awscliv2.zip -d /tmp
    /tmp/aws/install
    rm -rf /tmp/aws /tmp/awscliv2.zip
  - ansible-galaxy collection install fortinet.console fortinet.fortiadc fortinet.fortianalyzer fortinet.fortiflexvm fortinet.fortimanager fortinet.fortios fortinet.fortiswitch fortinet.fortiweb
  - |
    export HOME=/root && /root/npm-install.sh
  - |
    export HOME="/root"
    dotnet tool install --global Microsoft.CST.DevSkim.CLI
    dotnet dev-certs https --trust
  - |
    docker pull ghcr.io/40docs/devcontainer:latest
    docker pull mcp/memory:latest
    docker pull mcp/git:latest
    docker pull mcp/time:latest
    docker pull mcp/memory:latest
    docker pull mcp/sequentialthinking:latest
    docker pull mcp/filesystem:latest
    docker pull kubernetes-mcp-server@latest
    docker pull hashicorp/terraform-mcp-server:latest
    docker pull ghcr.io/github/github-mcp-server
    usermod -aG docker ${var_admin_username}
  - |
    # Enable NVIDIA persistence daemon for stable GPU memory management
    nvidia-persistenced --user ${var_admin_username}
    systemctl enable nvidia-persistenced
    # Set GPU performance mode
    nvidia-smi -pm ENABLED || echo "Performance mode setting may need manual intervention"
    # Configure NVIDIA Container Runtime for Docker
    nvidia-ctk runtime configure --runtime=docker
    systemctl restart docker
    # Wait for Docker to fully restart and recognize nvidia runtime
    sleep 10
    # Add user to render group for GPU device access
    usermod -aG render ${var_admin_username}
    # Set up udev rules for GPU device permissions
    echo 'KERNEL=="nvidia*", GROUP="render", MODE="0666"' > /etc/udev/rules.d/70-nvidia.rules
    echo 'KERNEL=="nvidia_uvm", GROUP="render", MODE="0666"' >> /etc/udev/rules.d/70-nvidia.rules
    echo 'KERNEL=="nvidia_modeset", GROUP="render", MODE="0666"' >> /etc/udev/rules.d/70-nvidia.rules
    echo 'KERNEL=="nvidiactl", GROUP="render", MODE="0666"' >> /etc/udev/rules.d/70-nvidia.rules
    udevadm control --reload-rules
    udevadm trigger
    # Verify GPU setup
    nvidia-smi || echo "GPU setup may need manual intervention"
    # Test docker nvidia runtime after ensuring it's available
    if docker info | grep -q nvidia; then
      docker run --rm --gpus all ubuntu nvidia-smi || echo "GPU Docker runtime test failed, may need manual intervention"
    else
      echo "NVIDIA runtime not available in Docker, skipping GPU container test"
    fi
  - service apache2 stop && systemctl disable apache2
  - export HOME="/root" && curl -fsSL https://coder.com/install.sh | sh -s -- && usermod -aG docker coder && echo 'CODER_HTTP_ADDRESS=0.0.0.0:80' > /etc/coder.d/coder.env && systemctl enable --now coder && journalctl -u coder.service -b && rm -rf "/root/.cache/coder/"
  - |
    #!/bin/sh
    ARCH=$(dpkg-architecture -q DEB_BUILD_ARCH)
    download_url=$(curl --silent "https://api.github.com/repos/jgraph/drawio-desktop/releases/latest" \
      | jq -r --arg ARCH "$ARCH" \
          '.assets[] | select(.name | contains("deb") and contains($ARCH)) | .browser_download_url')
    curl -s -L "$${download_url}" -o /tmp/drawio.deb
    dpkg -i /tmp/drawio.deb
    rm /tmp/drawio.deb
  - |
    curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
    dpkg -i minikube_latest_amd64.deb
    mkdir -p /root/.local/state/vs-kubernetes/tools/minikube/linux-amd64
    ln -s /usr/bin/minikube /root/.local/state/vs-kubernetes/tools/minikube/linux-amd64/minikube
    rm minikube_latest_amd64.deb
  - |
    curl -Lo /tmp/actionlint.sh https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash
    chmod 755 /tmp/actionlint.sh
    export HOME=/root && bash /tmp/actionlint.sh latest /usr/bin
    rm /tmp/actionlint.sh
  - |
    curl -sSLo /tmp/terraform-docs.tar.gz \
      https://github.com/terraform-docs/terraform-docs/releases/download/v0.20.0/terraform-docs-v0.20.0-linux-amd64.tar.gz
    tar --extract --gzip --file /tmp/terraform-docs.tar.gz \
        --directory /usr/local/bin terraform-docs
    chmod +x /usr/local/bin/terraform-docs
    rm -f /tmp/terraform-docs.tar.gz
  - |
    curl -Lo /tmp/terrascan.tar.gz https://github.com/tenable/terrascan/releases/download/v1.19.9/terrascan_1.19.9_Linux_x86_64.tar.gz
    tar -xf /tmp/terrascan.tar.gz terrascan
    install terrascan /usr/local/bin
    rm -rf /tmp/terrascan.tar.gz terrascan
  - |
    LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | \grep -Po '"tag_name": *"v\K[^"]*')
    curl -Lo /tmp/lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/download/v$${LAZYGIT_VERSION}/lazygit_$${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
    tar xf /tmp/lazygit.tar.gz lazygit
    install lazygit -D -t /usr/local/bin/
    rm -rf /tmp/lazygit.tar.gz lazygit
  - curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
  - |
    curl -Lo /tmp/kustomize.sh "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"
    chmod 755 /tmp/kustomize.sh
    export HOME=/root && bash /tmp/kustomize.sh /usr/local/bin
    rm /tmp/kustomize.sh
  - |
    curl -sSLo /tmp/speedtest.tgz \
      https://install.speedtest.net/app/cli/ookla-speedtest-1.2.0-linux-x86_64.tgz
    tar --extract --gzip --file /tmp/speedtest.tgz \
        --directory /usr/local/bin speedtest
    chmod +x /usr/local/bin/speedtest
    rm -f /tmp/speedtest.tgz
    echo 'alias speedtest="speedtest --accept-license --accept-gdpr"' >> /root/.bash_aliases
    echo 'alias speedtest="speedtest --accept-license --accept-gdpr"' >> /root/.zshrc
    echo 'alias speedtest="speedtest --accept-license --accept-gdpr"' >> /root/.bashrc
  - |
    #!/bin/sh
    export PROVIDER=all
    curl -LO "https://github.com/GoogleCloudPlatform/terraformer/releases/download/$(curl -s https://api.github.com/repos/GoogleCloudPlatform/terraformer/releases/latest | grep tag_name | cut -d '"' -f 4)/terraformer-$${PROVIDER}-linux-amd64"
    chmod +x terraformer-$${PROVIDER}-linux-amd64
    mv terraformer-$${PROVIDER}-linux-amd64 /usr/local/bin/terraformer
  - |
    export "GOBIN=/usr/local/bin"
    go install github.com/Azure/aztfexport@latest
    go install golang.org/x/tools/gopls@latest
    go install honnef.co/go/tools/cmd/staticcheck@latest
  - |
    # Clone and build xmrig with proper dependency checks
    if command -v cmake >/dev/null 2>&1 && command -v make >/dev/null 2>&1; then
      git clone https://github.com/xmrig/xmrig.git /root/xmrig
      mkdir -p /root/xmrig/build && cd /root/xmrig/build
      cmake .. && make -j$(nproc) && install -m 0755 xmrig /usr/local/bin/xmrig || true
      cd -
      rm -rf /root/xmrig
    else
      echo "Warning: cmake or make not available, skipping xmrig build"
    fi
  - update-alternatives --set editor /usr/bin/vim.basic
  - |
    LACEWORK_VERSION=$(curl -s "https://api.github.com/repos/robinmordasiewicz/extensible-reporting/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
    curl -L -o lw_report_gen "https://github.com/robinmordasiewicz/extensible-reporting/releases/download/v$${LACEWORK_VERSION}/lw_report_gen_linux_x86_64"
    install lw_report_gen /usr/local/bin
    rm lw_report_gen
  - curl -s https://ohmyposh.dev/install.sh | HOME=/root bash -s -- -d /usr/local/bin -t /var/local/themes
  - curl -fsSL https://raw.githubusercontent.com/smtg-ai/claude-squad/main/install.sh | HOME=/root bash -s --
  - |
    export HOME=/root
    curl -fsSL https://claude.ai/install.sh | bash -s --
    CLAUDE_LINK="/root/.local/bin/claude"
    CLAUDE_TARGET=$(readlink "$CLAUDE_LINK" || true)
    if [ -n "$CLAUDE_TARGET" ] && [ -e "$CLAUDE_TARGET" ]; then
      REL_TARGET=$(realpath --relative-to="$(dirname "$CLAUDE_LINK")" "$CLAUDE_TARGET")
      ln -sf "$REL_TARGET" "$CLAUDE_LINK"
    fi
    echo "export ENABLE_BACKGROUND_TASKS=1" >> /root/.bashrc
    echo "export ENABLE_BACKGROUND_TASKS=1" >> /root/.zshrc
  - |
    # Attempt SuperClaude framework setup (non-critical)
    echo "Setting up SuperClaude framework..."
    export HOME=/root
    export PATH="/root/.local/bin:$PATH"

    # Verify Claude CLI is available and create claude_cli symlink if needed
    if command -v claude >/dev/null 2>&1; then
        echo "Claude CLI found, creating claude_cli symlink for SuperClaude compatibility..."
        CLAUDE_PATH=$(which claude)
        CLAUDE_DIR=$(dirname "$CLAUDE_PATH")
        ln -sf "$CLAUDE_PATH" "$CLAUDE_DIR/claude_cli"
        export PATH="$CLAUDE_DIR:$PATH"
    else
        echo "WARNING: Claude CLI not found in PATH, checking ~/.local/bin..." >&2
        if [ -f "/root/.local/bin/claude" ]; then
            echo "Found Claude CLI in ~/.local/bin, creating claude_cli symlink..."
            ln -sf "/root/.local/bin/claude" "/root/.local/bin/claude_cli"
            export PATH="/root/.local/bin:$PATH"
        else
            echo "WARNING: Claude CLI not found, SuperClaude setup may fail" >&2
        fi
    fi

    if command -v SuperClaude >/dev/null 2>&1; then
        echo "SuperClaude command found, attempting framework installation..."
        if SuperClaude install --profile developer; then
            echo "SuperClaude framework installed successfully"
        else
            echo "WARNING: SuperClaude install --profile developer failed, continuing without framework setup" >&2
            # Log the failure but don't exit - this is not critical for VM operation
        fi
    else
        echo "WARNING: SuperClaude command not found, skipping framework setup" >&2
        # Continue without SuperClaude - this is not critical for basic VM functionality
    fi
  - |
    mkdir -p /root/.config/systemd/user

    # Create a user systemd service that starts the tunnel on login
    cat << 'EOF' > /root/.config/systemd/user/vscode-tunnel.service
    [Unit]
    Description=VS Code Remote Tunnel
    After=network.target

    [Service]
    ExecStart=%h/bin/start-tunnel.sh
    Restart=always
    TimeoutStartSec=10

    [Install]
    WantedBy=default.target
    EOF

    mkdir -p /root/bin
    cat << 'EOF' > /root/bin/start-tunnel.sh
    #!/bin/bash
    export PATH=$PATH:/usr/local/bin
    export HOME=$HOME
    exec code tunnel --accept-server-license-terms --name=$(hostname)-$USER
    EOF
    chmod +x /root/bin/start-tunnel.sh
  - |
      if ! bash /root/prewarm-cache.sh; then
        echo "Error: prewarm-cache.sh failed" >&2
        exit 1
      fi
  - touch /root/.hushlogin
  - |
    cp -a /root/.act /etc/skel
    cp -a /root/.aspnet /etc/skel
    cp -a /root/.azure /etc/skel
    cp -a /root/.bash_aliases /etc/skel
    cp -a /root/.bashrc /etc/skel
    cp -a /root/.cache /etc/skel
    cp -a /root/.config /etc/skel
    # Update Claude MCP configuration with API keys
    if [ -f /root/.claude/mcp.json ]; then
      jq '.mcpServers.Perplexity.env.PERPLEXITY_API_KEY = "${var_perplexity_api_key}"' /root/.claude/mcp.json > /tmp/mcp.json && mv /tmp/mcp.json /root/.claude/mcp.json
      jq '.mcpServers["brave-search"].env.BRAVE_API_KEY = "${var_brave_api_key}"' /root/.claude/mcp.json > /tmp/mcp.json && mv /tmp/mcp.json /root/.claude/mcp.json
    fi
    cp -a /root/.claude /etc/skel
    cp -a /root/.claude.json /etc/skel
    cp -a /root/.digrc /etc/skel
    cp -a /root/.dotnet /etc/skel
    cp -a /root/.gitconfig /etc/skel
    cp -a /root/.hushlogin /etc/skel
    cp -a /root/.kube /etc/skel
    cp -a /root/.lacework.toml /etc/skel
    cp -a /root/.launchpadlib /etc/skel
    cp -a /root/.local /etc/skel
    cp -a /root/.npm /etc/skel
    cp -a /root/.npmrc /etc/skel
    cp -a /root/.nuget /etc/skel
    cp -a /root/.oh-my-posh /etc/skel
    cp -a /root/.oh-my-zsh /etc/skel
    cp -a /root/.opencommit /etc/skel
    cp -a /root/.p10k.zsh /etc/skel
    cp -a /root/.profile /etc/skel
    cp -a /root/.terraform.d /etc/skel
    cp -a /root/.tfenv /etc/skel
    cp -a /root/.tmux /etc/skel
    cp -a /root/.tmux.conf /etc/skel
    cp -a /root/.vim /etc/skel
    cp -a /root/.vimrc /etc/skel
    cp -a /root/.vscode /etc/skel
    cp -a /root/.vscode-insiders /etc/skel
    cp -a /root/.vscode-server /etc/skel
    cp -a /root/.vscode-server-insiders /etc/skel
    cp -a /root/.wget-hsts /etc/skel
    cp -a /root/.z /etc/skel
    cp -a /root/.zshrc /etc/skel
    cp -a /root/dotfiles /etc/skel
    cp -a /root/40docs /etc/skel
    cp -a /root/go /etc/skel
    cp -a /root/bin /etc/skel
    cp -a /root/snap /etc/skel
  - fwupdmgr update -y --no-reboot-check
  - |
    echo "Checking if reboot is required..."
    if [ -f /var/run/reboot-required ]; then
      echo "Reboot required. Initiating reboot..."
      reboot
    else
      echo "No reboot required."
    fi
