
timezone: America/Toronto
package_update: true
package_upgrade: true
package_reboot_if_required: true

power_state:
  delay: now
  mode: reboot
  message: Rebooting after cloud-init
  timeout: 30
  condition: true

bootcmd:
  - mkdir -p /home /var/lib/docker /root/.ollama
  - |
format_and_mount(){local lun="$1" label="$2" mount_point="$3" always_format="$4";local dev="/dev/disk/azure/scsi1/lun$lun";local part="$dev-part1";for i in $(seq 1 30);do if [ -b "$dev" ];then break;fi;sleep 2;done;if [ "$always_format" = "yes" ];then if mount | grep -q "$part";then umount -f "$part" >/dev/null 2>&1||true;fi;wipefs -a "$dev" >/dev/null 2>&1||true;parted -s "$dev" mklabel gpt mkpart primary ext4 0% 100%;mkfs.ext4 -F "$part" -L "$label";else if ! blkid "$part" >/dev/null 2>&1;then parted -s "$dev" mklabel gpt mkpart primary ext4 0% 100%;mkfs.ext4 -F "$part" -L "$label";fi;fi;}

format_and_mount 0 homefs /home yes;format_and_mount 1 dockerfs /var/lib/docker no;format_and_mount 2 ollamafs /root/.ollama no

mounts:
  - ["LABEL=homefs", "/home", "ext4", "defaults,nofail", "0", "2"]
  - ["LABEL=dockerfs", "/var/lib/docker", "ext4", "defaults,nofail", "0", "2"]
  - ["LABEL=ollamafs", "/root/.ollama", "ext4", "defaults,nofail", "0", "2"]

ssh_deletekeys: false
ssh_keys:
  rsa_private: |
    ${indent(4, var_ssh_host_rsa_private)}
  rsa_public: |
    ${indent(4, var_ssh_host_rsa_public)}
  ecdsa_private: |
    ${indent(4, var_ssh_host_ecdsa_private)}
  ecdsa_public: |
    ${indent(4, var_ssh_host_ecdsa_public)}
  ed25519_private: |
    ${indent(4, var_ssh_host_ed25519_private)}
  ed25519_public: |
    ${indent(4, var_ssh_host_ed25519_public)}

apt:
  sources:
    authd:
      source: ppa:ubuntu-enterprise-desktop/authd
    dotnet:
      source: ppa:dotnet/backports
    ansible:
      source: ppa:ansible/ansible
    trivy:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://get.trivy.dev/deb generic main
      keyserver: https://get.trivy.dev/deb/public.key
      keyid: E9D0A3616276FA6C
    hashicorp:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://apt.releases.hashicorp.com $RELEASE main
      keyserver: https://apt.releases.hashicorp.com/gpg
      keyid: AA16FCBCA621E701
    github-cli:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://cli.github.com/packages stable main
      keyserver: https://cli.github.com/packages/githubcli-archive-keyring.gpg
      keyid: 23F3D4EA75716059
    google-cloud-sdk:
      source: deb [arch=amd64 signed-by=$KEY_FILE] http://packages.cloud.google.com/apt cloud-sdk main
      keyserver: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      keyid: C0BA5CE6DC6315A3
    google-chrome:
      source: deb [arch=amd64 signed-by=$KEY_FILE] http://dl.google.com/linux/chrome/deb/ stable main
      keyserver: https://dl-ssl.google.com/linux/linux_signing_key.pub
      keyid: 7721F63BD38B4796
    docker:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://download.docker.com/linux/ubuntu noble stable
      keyserver: https://download.docker.com/linux/ubuntu/gpg
      keyid: 8D81803C0EBFCD88
    azure-cli:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://packages.microsoft.com/repos/azure-cli/ $RELEASE main
      keyserver: https://packages.microsoft.com/keys/microsoft.asc
      keyid: EB3E94ADBE1229CF
    vscode:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://packages.microsoft.com/repos/vscode stable main
      keyserver: https://packages.microsoft.com/keys/microsoft.asc
      keyid: EB3E94ADBE1229CF
    powershell:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://packages.microsoft.com/ubuntu/24.04/prod $RELEASE main
      keyserver: https://packages.microsoft.com/keys/microsoft.asc
      keyid: EB3E94ADBE1229CF
    ubuntu-universe:
      source: "deb http://archive.ubuntu.com/ubuntu $RELEASE universe"
    ubuntu-multiverse:
      source: "deb http://archive.ubuntu.com/ubuntu $RELEASE multiverse"
%{ if var_has_gpu ~}
    nvidia-container-toolkit:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://nvidia.github.io/libnvidia-container/stable/deb/$(ARCH) /
      keyserver: https://nvidia.github.io/libnvidia-container/gpgkey
      keyid: DDCAE044F796ECB0
    nvtop:
      source: ppa:quentiumyt/nvtop
    nvidia:
      source: ppa:graphics-drivers/ppa
%{ endif ~}

write_files:
  - path: /opt/setup-github-runner.sh
    permissions: '0755'
    owner: root:root
    content: |
      set -eu

      RUNNER_VERSION="2.321.0"

      retry() {
          for i in 1 2 3
          do
              if eval "$1"; then return 0; fi
              sleep 5
          done
          return 1
      }

      main() {
          echo "GitHub Actions Runner Setup Started: $(date)"

          export ORG_URL="https://github.com/${var_github_org}"
          export GITHUB_TOKEN="${var_github_token}"
          export RUNNER_GROUP="${var_runner_group}"
          LABELS_BASE="${var_runner_labels}"
          if echo "$LABELS_BASE" | grep -qi "cloudshell"; then
            export RUNNER_LABELS="$LABELS_BASE"
          else
            if [ -n "$LABELS_BASE" ]; then
              export RUNNER_LABELS="$LABELS_BASE,CLOUDSHELL,cloudshell,self-hosted,linux"
            else
              export RUNNER_LABELS="CLOUDSHELL,cloudshell,self-hosted,linux"
            fi
          fi
          export RUNNER_NAME="$(hostname)"

          echo "Runner Configuration:"
          echo "  Organization URL: $ORG_URL"
          echo "  Runner Name: $RUNNER_NAME"
          echo "  Runner Group: $${RUNNER_GROUP:-default}"
          echo "  Runner Labels: $RUNNER_LABELS"

          if [ -z "$GITHUB_TOKEN" ]
          then
              echo "ERROR: GitHub token is not set" >&2
              exit 1
          fi
          for cmd in curl jq tar; do
            command -v $cmd >/dev/null || exit 1
          done

          if ! id -u ubuntu >/dev/null 2>&1
          then
              useradd -m -s /bin/bash ubuntu
              usermod -aG sudo,docker,adm ubuntu
              mkdir -p /home/ubuntu/.ssh
              chown -R ubuntu:ubuntu /home/ubuntu/.ssh
              chmod 700 /home/ubuntu/.ssh
          fi

          for f in .bashrc .profile; do
              if ! grep -q 'NVM_DIR=/usr/local/nvm' /home/ubuntu/$f; then
                  printf '%s\n' \
                    'export PATH="$HOME/.local/bin:/usr/local/bin:$PATH"' \
                    'export NVM_DIR=/usr/local/nvm' \
                    '[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"' \
                    'export PATH="/usr/local/lib/node_modules/.bin:$PATH"' \
                    >> /home/ubuntu/$f
              fi
          done

          DEVCONTAINER_PATH=$(find /usr/local/nvm -name devcontainer -type f 2>/dev/null | head -1)
          if [ -n "$DEVCONTAINER_PATH" ]
          then
              ln -sf "$DEVCONTAINER_PATH" /usr/local/bin/devcontainer
          fi

          RUNNER_DIR="/home/ubuntu/actions-runner"
          SERVICE_NAME="actions.runner.${var_github_org}.$RUNNER_NAME"

          if [ -d "$RUNNER_DIR" ]
          then
              systemctl stop "$SERVICE_NAME" 2>&1 | grep -E "(Stopping|Stopped)" || true
              rm -rf "$RUNNER_DIR"
          fi

          mkdir -p "$RUNNER_DIR" && chown -R ubuntu:ubuntu "$RUNNER_DIR" && cd "$RUNNER_DIR"

          RUNNER_URL="https://github.com/actions/runner/releases/download/v$RUNNER_VERSION/actions-runner-linux-x64-$RUNNER_VERSION.tar.gz"
          if ! retry "curl -o actions-runner.tar.gz -L '$RUNNER_URL'"; then
              exit 1
          fi

          sudo -u ubuntu tar xzf ./actions-runner.tar.gz && rm -f actions-runner.tar.gz
          if [ -f "./bin/installdependencies.sh" ]
          then
              echo "Installing GitHub runner dependencies..."
              ./bin/installdependencies.sh 2>&1 | grep -E "(Installing|Error|Warning)" || echo "Runner dependency installation may have failed"
          fi

          echo "Requesting runner registration token from GitHub API..."
          REG_TOKEN_RESPONSE=$(curl -s -X POST -H 'Accept: application/vnd.github.v3+json' -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/orgs/${var_github_org}/actions/runners/registration-token")
          REG_TOKEN=$(echo "$REG_TOKEN_RESPONSE" | jq -r '.token')
          if [ -z "$REG_TOKEN" ] || [ "$REG_TOKEN" = "null" ]
          then
              echo "ERROR: Failed to get registration token from GitHub API" >&2
              echo "Response: $REG_TOKEN_RESPONSE" >&2
              exit 1
          fi
          echo "Successfully obtained registration token"

          CONFIG_CMD="sudo -u ubuntu ./config.sh --url \"$ORG_URL\" --token \"$REG_TOKEN\" --name \"$RUNNER_NAME\" --work \"_work\" --unattended --replace --labels \"$RUNNER_LABELS\""
          if [ -n "$RUNNER_GROUP" ]
          then
              CONFIG_CMD="$CONFIG_CMD --runnergroup \"$RUNNER_GROUP\""
          fi

          echo "Configuring runner with labels: $RUNNER_LABELS"
          if ! eval "$CONFIG_CMD"; then
              echo "ERROR: Runner configuration failed" >&2
              exit 1
          fi
          echo "Runner configured successfully"

          echo "Installing and starting runner service: $SERVICE_NAME"
          if ./svc.sh install ubuntu && systemctl daemon-reload && systemctl enable "$SERVICE_NAME" && systemctl start "$SERVICE_NAME"; then
              echo "✅ GitHub Actions Runner service installed and started successfully"
              echo "Service Name: $SERVICE_NAME"
              systemctl status "$SERVICE_NAME" --no-pager || true
          else
              echo "ERROR: Failed to install or start runner service" >&2
              exit 1
          fi
      }

      main "$@"
  - path: /etc/ssh/sshd_config.d/custom.conf
    content: |

      UsePAM yes
      KbdInteractiveAuthentication yes
      PrintMotd no
      PrintLastLog no
      UseDNS no

      Protocol 2
      PermitRootLogin yes
      MaxAuthTries 3
      MaxSessions 10
      MaxStartups 10:30:60
      LoginGraceTime 60

      ClientAliveInterval 300
      ClientAliveCountMax 2
      TCPKeepAlive yes

      PubkeyAuthentication yes
      AuthenticationMethods "keyboard-interactive" "publickey"
      PasswordAuthentication no
      PermitEmptyPasswords no
      ChallengeResponseAuthentication no

      X11Forwarding no
      X11UseLocalhost yes
      PermitTunnel no
      AllowAgentForwarding yes
      AllowTcpForwarding yes
      GatewayPorts no

      DenyUsers guest
      DenyUsers nobody
      DenyUsers xbian
      DenyUsers Admin
      DenyUsers admin
      DenyUsers user

      LogLevel VERBOSE
      SyslogFacility AUTH

      Banner /etc/ssh/banner
      VersionAddendum none
  - path: /etc/ssh/banner
    permissions: '0644'
    owner: root:root
    content: |
  - path: /etc/fail2ban/jail.d/cloudshell-custom.conf
    permissions: '0644'
    owner: root:root
    content: |

      [DEFAULT]
      ignoreip = 127.0.0.1/8 ::1 10.0.0.0/8 192.168.0.0/16 172.16.0.0/12
      bantime = 86400
      findtime = 600
      maxretry = 3
      backend = auto
      usedns = warn
      destemail = root@localhost
      sender = fail2ban@cloudshell
      mta = sendmail
      protocol = tcp
      chain = INPUT
      port = 0:65535
      fail2ban_agent = Fail2Ban/%(fail2ban_version)s

      loglevel = INFO
      logtarget = /var/log/fail2ban.log

      [sshd]
      enabled = true
      port = ssh
      filter = sshd
      logpath = /var/log/auth.log
      maxretry = 3
      findtime = 300
      bantime = 3600
      action = %(action_mwl)s

      [sshd-aggressive]
      enabled = true
      port = ssh
      filter = sshd-aggressive
      logpath = /var/log/auth.log
      maxretry = 2
      findtime = 300
      bantime = 86400
      action = %(action_mwl)s

      [recidive]
      enabled = true
      logpath = /var/log/fail2ban.log
      maxretry = 3
      findtime = 604800
      bantime = 2592000
      action = %(action_mwl)s
  - path: /etc/fail2ban/filter.d/sshd-aggressive.conf
    permissions: '0644'
    owner: root:root
    content: |
      [INCLUDES]
      before = common.conf

      [Definition]
      _daemon = sshd

      failregex = ^%(__prefix_line)s(?:error: PAM: )?[aA]uthentication (?:failure|error|failed) for .* from <HOST>( via \S+)?\s*$
                  ^%(__prefix_line)s(?:error: )?Received disconnect from <HOST>: 3: .*: Auth fail$
                  ^%(__prefix_line)sUser .+ from <HOST> not allowed because not listed in AllowUsers\s*$
                  ^%(__prefix_line)sUser .+ from <HOST> not allowed because listed in DenyUsers\s*$
                  ^%(__prefix_line)sUser .+ from <HOST> not allowed because not in any group\s*$
                  ^%(__prefix_line)srefused connect from \S+ \(<HOST>\)\s*$
                  ^%(__prefix_line)sReceived disconnect from <HOST>: 11: .+$
                  ^%(__prefix_line)sConnection closed by <HOST> \[preauth\]\s*$
                  ^%(__prefix_line)sConnection closed by authenticating user .+ <HOST> port \d+ \[preauth\]\s*$
                  ^%(__prefix_line)sDisconnected from (authenticating |invalid )?user .+ <HOST> port \d+ \[preauth\]\s*$
                  ^%(__prefix_line)sInvalid user .+ from <HOST> port \d+$
                  ^%(__prefix_line)sUser .+ from <HOST> not allowed because .+$

      ignoreregex =

      journalmatch = _SYSTEMD_UNIT=sshd.service + _COMM=sshd
  - path: /etc/fail2ban/action.d/cloudshell-notify.conf
    permissions: '0644'
    owner: root:root
    content: |
      [INCLUDES]
      before = common.conf

      [Definition]
      actionstart = echo "[$(date)] Fail2ban started" >> /var/log/security-events.log
                   logger -p auth.info "Fail2ban jail <name> started"

      actionstop = echo "[$(date)] Fail2ban stopped" >> /var/log/security-events.log
                  logger -p auth.info "Fail2ban jail <name> stopped"

      actioncheck =

      actionban = echo "[$(date)] SECURITY ALERT: IP <ip> banned by jail <name> after <failures> attempts. Country: $(geoiplookup <ip> 2>/dev/null || echo 'Unknown')" >> /var/log/security-events.log
                 logger -p auth.warning "SECURITY ALERT: IP <ip> banned by fail2ban jail <name>"
                 iptables -I f2b-<name> 1 -s <ip> -j DROP

      actionunban = echo "[$(date)] IP <ip> unbanned from jail <name>" >> /var/log/security-events.log
                   logger -p auth.info "IP <ip> unbanned from fail2ban jail <name>"
                   iptables -D f2b-<name> -s <ip> -j DROP

      [Init]
      name = default
  - path: /usr/local/bin/security-monitor.sh
    permissions: '0755'
    owner: root:root
    content: |

      set -euo pipefail

      SECURITY_LOG="/var/log/security-events.log"
      AUTH_LOG="/var/log/auth.log"
      REPORT_FILE="/var/log/security-report.log"

      touch "$SECURITY_LOG" "$REPORT_FILE"

      generate_report() {
          local timeframe="$${1:-24 hours}"
          echo "=== CLOUDSHELL Security Report - $(date) ===" >> "$REPORT_FILE"
          echo "Analysis period: Last $timeframe" >> "$REPORT_FILE"
          echo >> "$REPORT_FILE"

          echo "SSH Attack Statistics:" >> "$REPORT_FILE"
          grep "Failed password" "$AUTH_LOG" | tail -1000 | awk '{print $1, $2, $3, $(NF-3)}' | sort | uniq -c | sort -nr | head -10 >> "$REPORT_FILE" 2>/dev/null || true
          echo >> "$REPORT_FILE"

          echo "Most Targeted Usernames:" >> "$REPORT_FILE"
          grep "Failed password\|Invalid user" "$AUTH_LOG" | tail -1000 | awk '{if(/Invalid user/) print $(NF-3); else if(/Failed password/) print $9}' | sort | uniq -c | sort -nr | head -10 >> "$REPORT_FILE" 2>/dev/null || true
          echo >> "$REPORT_FILE"

          echo "Fail2ban Status:" >> "$REPORT_FILE"
          fail2ban-client status 2>/dev/null >> "$REPORT_FILE" || echo "Fail2ban not running" >> "$REPORT_FILE"
          echo >> "$REPORT_FILE"

          echo "Currently Banned IPs:" >> "$REPORT_FILE"
          fail2ban-client status sshd 2>/dev/null | grep "Banned IP list" >> "$REPORT_FILE" || true
          echo "=== End Report ===" >> "$REPORT_FILE"
          echo >> "$REPORT_FILE"
      }

      check_security_events() {
          local recent_failures
          recent_failures=$(grep "$(date '+%Y-%m-%d %H')" "$AUTH_LOG" | grep -c "Failed password\|Invalid user" || echo "0")

          if [ "$recent_failures" -gt 50 ]; then
              echo "[$(date)] CRITICAL: $recent_failures failed SSH attempts in the last hour!" >> "$SECURITY_LOG"
              logger -p auth.crit "CRITICAL SECURITY ALERT: $recent_failures failed SSH attempts in the last hour"
          fi
      }

      update_geoip() {
          if command -v geoiplookup >/dev/null 2>&1; then
              echo "GeoIP lookup available" >> "$SECURITY_LOG"
          else
              echo "Installing GeoIP lookup tools..." >> "$SECURITY_LOG"
              apt-get update -qq && apt-get install -y geoip-bin geoip-database 2>/dev/null || true
          fi
      }

      case "$${1:-report}" in
          "report")
              generate_report
              ;;
          "check")
              check_security_events
              ;;
          "geoip")
              update_geoip
              ;;
          "monitor")
              while true; do
                  check_security_events
                  sleep 300  # Check every 5 minutes
              done
              ;;
          *)
              echo "Usage: $0 [report|check|geoip|monitor]"
              echo "  report  - Generate security report"
              echo "  check   - Check for critical security events"
              echo "  geoip   - Update GeoIP databases"
              echo "  monitor - Continuous monitoring (runs every 5 minutes)"
              exit 1
              ;;
      esac
  - path: /etc/systemd/system/security-monitor.service
    permissions: '0644'
    owner: root:root
    content: |
      [Unit]
      Description=CLOUDSHELL Security Monitor
      After=network.target fail2ban.service
      Wants=fail2ban.service

      [Service]
      Type=simple
      ExecStart=/usr/local/bin/security-monitor.sh monitor
      Restart=always
      RestartSec=30
      User=root
      Group=root
      StandardOutput=journal
      StandardError=journal

      [Install]
      WantedBy=multi-user.target
  - path: /etc/systemd/system/security-report.service
    permissions: '0644'
    owner: root:root
    content: |
      [Unit]
      Description=CLOUDSHELL Security Report Generator

      [Service]
      Type=oneshot
      ExecStart=/usr/local/bin/security-monitor.sh report
      User=root
      Group=root
  - path: /etc/systemd/system/security-report.timer
    permissions: '0644'
    owner: root:root
    content: |
      [Unit]
      Description=Generate security reports every 6 hours
      Requires=security-report.service

      [Timer]
      OnBootSec=1h
      OnUnitActiveSec=6h

      [Install]
      WantedBy=timers.target
  - path: /usr/local/bin/ssh-security-check.sh
    permissions: '0755'
    owner: root:root
    content: |

      set -euo pipefail

      RED='\033[0;31m'
      GREEN='\033[0;32m'
      YELLOW='\033[1;33m'
      NC='\033[0m' # No Color

      echo -e "$${GREEN}=== CLOUDSHELL SSH Security Check ===$${NC}"
      echo "Timestamp: $(date)"
      echo

      echo -e "$${YELLOW}SSH Configuration Security:$${NC}"

      check_sshd_config() {
          local param="$1"
          local expected="$2"
          local actual
          actual=$(sshd -T 2>/dev/null | grep -i "^$param " | awk '{print $2}' || echo "not found")

          if [[ "$actual" == "$expected" ]]; then
              echo -e "  ✅ $param: $actual"
          else
              echo -e "  ❌ $param: $actual (expected: $expected)"
          fi
      }

      check_sshd_config "maxauthtries" "3"
      check_sshd_config "maxsessions" "10"
      check_sshd_config "loginfacetime" "60"
      check_sshd_config "clientaliveinterval" "300"
      check_sshd_config "passwordauthentication" "no"
      check_sshd_config "permitemptypasswords" "no"
      check_sshd_config "x11forwarding" "no"

      echo
      echo -e "$${YELLOW}Fail2ban Status:$${NC}"
      if systemctl is-active fail2ban >/dev/null 2>&1; then
          echo -e "  ✅ Fail2ban service: Active"

          for jail in sshd sshd-aggressive recidive; do
              if fail2ban-client status "$jail" >/dev/null 2>&1; then
                  local banned_count
                  banned_count=$(fail2ban-client status "$jail" | grep "Currently banned" | awk '{print $4}')
                  echo -e "  ✅ Jail $jail: Active ($${banned_count} banned IPs)"
              else
                  echo -e "  ❌ Jail $jail: Inactive or not found"
              fi
          done
      else
          echo -e "  ❌ Fail2ban service: Inactive"
      fi

      echo
      echo -e "$${YELLOW}Recent Security Events:$${NC}"

      local recent_attacks
      recent_attacks=$(grep "$(date '+%Y-%m-%d')" /var/log/auth.log | grep -c "Failed password\|Invalid user" 2>/dev/null || echo "0")
      echo -e "  📊 Failed SSH attempts today: $recent_attacks"

      echo -e "  🔍 Top attacking IPs today:"
      grep "$(date '+%Y-%m-%d')" /var/log/auth.log | grep "Failed password\|Invalid user" | awk '{print $(NF-3)}' | sort | uniq -c | sort -nr | head -5 | while read -r count ip; do
          echo -e "    $ip: $count attempts"
      done 2>/dev/null || echo "    No attacks detected today"

      echo
      echo -e "$${YELLOW}Firewall Status:$${NC}"
      if command -v ufw >/dev/null 2>&1; then
          if ufw status | grep -q "Status: active"; then
              echo -e "  ✅ UFW firewall: Active"
          else
              echo -e "  ⚠️  UFW firewall: Inactive"
          fi
      else
          echo -e "  ❌ UFW firewall: Not installed"
      fi

      echo
      echo -e "$${GREEN}Security check completed.$${NC}"
  - path: /root/prewarm-cache.sh
    permissions: '0755'
    owner: root:root
    content: |
        for i in {1..30}
        do
            command -v code >/dev/null 2>&1 && break
            sleep 2
        done
      if command -v code >/dev/null 2>&1; then
        echo "Installing VS Code extensions..."
        timeout 300 bash -c '
          code --install-extension ms-python.python --force 2>&1 | grep -E "(Installing|Successfully|already|failed)" || true
          code --install-extension ms-vscode.docker --force 2>&1 | grep -E "(Installing|Successfully|already|failed)" || true
          code --install-extension hashicorp.terraform --force 2>&1 | grep -E "(Installing|Successfully|already|failed)" || true
        ' || echo "VS Code extension installation timed out"
      fi
  - path: /etc/profile.d/nvm.sh
    owner: root:root
    permissions: '0644'
    content: |
      export NVM_DIR=/usr/local/nvm
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
  - path: /etc/profile.d/user-local-bin.sh
    owner: root:root
    permissions: '0644'
    content: |
      export PATH="$HOME/.local/bin:$PATH"
  - path: /etc/profile.d/npm-global.sh
    owner: root:root
    permissions: '0644'
    content: |
      export NVM_DIR=/usr/local/nvm
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      [ -d "$NVM_DIR" ] && [ -s "$NVM_DIR/nvm.sh" ] && NODE_VERSION=$(nvm current 2>/dev/null) && [ "$NODE_VERSION" != "" ] && [ "$NODE_VERSION" != "system" ] && export PATH="$NVM_DIR/versions/node/$NODE_VERSION/bin:$PATH"
      export PATH="/usr/local/bin:/usr/local/lib/node_modules/.bin:/usr/lib/node_modules/.bin:$PATH"
%{ if var_has_gpu ~}
  - path: /etc/profile.d/nvidia.sh
    owner: root:root
    permissions: '0644'
    content: |
      export NVIDIA_VISIBLE_DEVICES=all NVIDIA_DRIVER_CAPABILITIES=all CUDA_VISIBLE_DEVICES=all
%{ endif ~}
  - path: /root/.lacework.toml
    content: |
      [default]
        account = "${var_forticnapp_account}"
        subaccount = "${var_forticnapp_subaccount}"
        api_key = "${var_forticnapp_api_key}"
        api_secret = "${var_forticnapp_api_secret}"
        version = 2
  - path: /root/npm-install.sh
    permissions: '0755'
    owner: root:root
    content: |
      set -eu
      NVM_DIR="/usr/local/nvm"

      if [ ! -d "$NVM_DIR/.git" ]
      then
          echo "Cloning NVM repository..."
          git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR" 2>&1 | grep -E "(Cloning|Receiving|Resolving)" || true
      else
          git -C "$NVM_DIR" pull 2>&1 | grep -E "(Updating|Already|Fast-forward)" || true
      fi
      if [ -f "$NVM_DIR/nvm.sh" ]
      then
          . "$NVM_DIR/nvm.sh"
      else
          exit 0
      fi

      unset NPM_CONFIG_PREFIX
      export npm_config_prefix="" npm_config_globalconfig=""
      [ -f "/root/.npmrc" ] && mv /root/.npmrc "/root/.npmrc.bak"

      echo "Installing Node.js via NVM..."
      nvm install node 2>&1 | grep -E "(Downloading|Installing|Now using)" && nvm alias default node && nvm use default --delete-prefix || exit 0
      nvm use --delete-prefix "v24.4.1" 2>&1 | grep -E "(Now using|not found)" || true
      npm config set loglevel error

PACKAGES="@openai/codex @anaisbetts/mcp-installer @modelcontextprotocol/server-memory @modelcontextprotocol/server-filesystem @modelcontextprotocol/server-brave-search @modelcontextprotocol/server-sequential-thinking @azure/mcp@latest @21st-dev/magic@latest @qwen-code/qwen-code@latest @chongdashu/cc-statusline@latest bash-language-server claude-auto-commit cwebp @devcontainers/cli dockerfile-language-server-nodejs eslint eslint-config-prettier gatsby-cli javascript-typescript-langserver jsonlint markdownlint markdownlint-cli markdownlint-cli2 newman opal-security playwright prettier puppeteer setup-eslint-config sql-language-server stylelint-config-prettier svgo terminalizer unified-language-server vscode-css-languageserver-bin vscode-html-languageserver-bin vscode-json-languageserver-bin yaml-language-server"

      echo "Installing npm packages globally..."
      for PKG in $PACKAGES
      do
        echo "  Installing: $PKG"
        CXXFLAGS="--std=gnu++20" npm install -g --no-save "$PKG" 2>&1 | grep -E "(added|updated|WARN|ERR)" || echo "    Warning: $PKG installation may have failed"
      done

      echo "Installing Playwright chromium browser..."
      playwright install --with-deps chromium 2>&1 | grep -E "(Downloading|downloaded|Installing|Success|already)" || echo "Playwright installation may have failed"
      find / -maxdepth 1 -type f \( -name "=0.22" -o -name "=1.12" -o -name "=2.0" -o -name "'=0.22'" \) -delete 2>&1 | grep -E "(removed|deleted)" || true
      exit 0

packages:[alsa-utils,ansible-lint,apache2-utils,apparmor,fail2ban,ufw,apt-file,apt-transport-https,asciidoctor,aspnetcore-runtime-9.0,autoconf,azure-cli,bash-completion,bat,binfmt-support,build-essential,ca-certificates,cabextract,cmake,cockpit,code,code-insiders,containerd.io,curl,dnsutils,docker-buildx-plugin,docker-ce,docker-ce-cli,docker-ce-rootless-extras,docker-compose-plugin,dos2unix,dotnet-sdk-6.0,dotnet-sdk-8.0,dotnet-sdk-9.0,dpkg,dpkg-dev,ffmpeg,file,fontconfig,fonts-powerline,frei0r-plugins,fuse3,fzf,g++,gh,git,gnupg,golang-go,google-chrome-stable,google-cloud-cli,graphviz,gstreamer1.0-libav,gstreamer1.0-plugins-bad,gstreamer1.0-plugins-base,gstreamer1.0-plugins-good,gstreamer1.0-plugins-ugly,gstreamer1.0-vaapi,hwloc,imagemagick,inkscape,iputils-ping,jq,kubectl,ladspa-sdk,libapache2-mod-php,libappindicator3-1,libavif-dev,libc6,libdbusmenu-glib4,libdbusmenu-gtk3-4,libfftw3-bin,libfftw3-dev,libfftw3-long3,libfftw3-quad3,libfftw3-single3,libfuse2t64,libfuse3-3,libgavl2,libgcc-s1,libgif-dev,libgl1,libgl1-mesa-dri,libglu1-mesa,libglx-mesa0,libgstreamer1.0-0,libhwloc-dev,libhwloc15,libicu-dev,libicu74,liblttng-ust1t64,libmovit-dev,libnotify4,libnuma-dev,libpoppler-cpp-dev,librust-gdk-pixbuf-sys-dev,libsecret-1-0,libsecret-1-dev,libsecret-common,libslirp0,libsox-fmt-all,libssl3t64,libstdc++6,libunwind8,libvidstab-dev,libvulkan1,libyelp-dev,locales,locales-all,lsb-release,lsd,make,melt,mesa-utils,mesa-utils-bin,mesa-vulkan-drivers,mtr,nmap,nodejs,npm,php,php-cgi,php-cli,php-mysql,php-pgsql,pigz,pkexec,pkg-config,policykit-1,poppler-utils,postgresql,postgresql-contrib,powershell,python3-full,python3-pip,python3-venv,qemu-user-static,shellcheck,skopeo,slirp4netns,snapd,software-properties-common,sox,sqlite3,squashfs-tools,swh-plugins,tcpdump,terraform,tesseract-ocr,tini,tofrodos,trivy,ubuntu-drivers-common,unzip,vim,vim-syntastic,vlc,weasyprint,wget,xdg-utils,xvfb,yamllint,yelp-tools,yq,zlib1g,zsh%{ if var_has_gpu ~},nvidia-container-toolkit,nvidia-driver-575,nvtop%{ endif ~}]

runcmd:
  - |
    set -eu;mkdir -p /root/.{local/bin,dotnet/tools,cargo/bin} /root/go/bin;export PATH="/root/.local/bin:/root/.dotnet/tools:/root/.cargo/bin:/root/go/bin:/usr/local/bin:/usr/local/lib/node_modules/.bin:/usr/lib/node_modules/.bin:$PATH";for shell in .profile .bashrc;do grep -q "CloudShell PATH" /root/$shell 2>/dev/null || echo 'export PATH="$HOME/.local/bin:$HOME/.dotnet/tools:$HOME/.cargo/bin:$HOME/go/bin:/usr/local/bin:$PATH"' >> /root/$shell;done
  - |
    DEBIAN_FRONTEND=noninteractive apt install authd -y;snap install authd-msentraid;systemctl stop authd authd.socket ssh systemd-logind ssh.socket;snap stop authd-msentraid;mkdir -p /etc/authd/brokers.d/;chmod 700 /etc/authd /etc/authd/brokers.d;cp /snap/authd-msentraid/current/conf/authd/msentraid.conf /etc/authd/brokers.d/msentraid.conf;sed -i -e 's|issuer = https://login.microsoftonline.com/<ISSUER_ID>/v2.0|issuer = "https://login.microsoftonline.com/${var_directory_tenant_id}/v2.0"|' -e 's|client_id = <CLIENT_ID>|client_id = "${var_directory_client_id}"|' /var/snap/authd-msentraid/current/broker.conf;sed -i 's/^#allowed_users = OWNER$/allowed_users = ALL/' /var/snap/authd-msentraid/current/broker.conf;echo 'ssh_allowed_suffixes = @fortinet-us.com' >> /var/snap/authd-msentraid/current/broker.conf;rm -rf /var/lib/authd;mkdir -p /var/lib/authd;chmod 700 /var/lib/authd;systemctl start authd;timeout 10 bash -c 'until systemctl is-active authd >/dev/null 2>&1;do sleep 0.5;done' || true;snap start authd-msentraid;systemctl start ssh systemd-logind ssh.socket
  - |
    systemctl stop systemd-logind getty@tty1.service || true;umount /etc/skel /home/.skel || true;rm -rf /etc/skel /home/.skel;mkdir -p /etc/skel /home/.skel;chmod 755 /etc/skel /home/.skel;chown root:root /etc/skel /home/.skel;grep -q "/home/.skel /etc/skel" /etc/fstab || echo "/home/.skel /etc/skel none bind 0 0" >> /etc/fstab;mount --bind /home/.skel /etc/skel;systemctl start systemd-logind || true
  - |
    OS=$(go env GOOS);ARCH=$(go env GOARCH);curl -fsSL -o cmctl https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_$${OS}_$${ARCH};chmod +x cmctl;mv cmctl /usr/local/bin
  - |
    curl -fsSL -o /tmp/get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3;chmod 700 /tmp/get_helm.sh;export HOME=/root && /tmp/get_helm.sh;rm -f /tmp/get_helm.sh;mkdir -p /root/.local/state/vs-kubernetes/tools/helm/linux-amd64;ln -sf /usr/local/bin/helm /root/.local/state/vs-kubernetes/tools/helm/linux-amd64/helm
  - |
    git clone --recurse-submodules https://github.com/40docs/.github.git /root/40docs && cd /root/40docs && [ -f ./install.sh ] && chmod +x ./install.sh && ./install.sh;cd - || true
  - |
    [ ! -d /root/.tfenv ] && git clone --depth=1 https://github.com/tfutils/tfenv.git /root/.tfenv && chmod +x /root/.tfenv/bin/tfenv && for shell in .bashrc .zshrc .profile;do echo 'export PATH="$HOME/.tfenv/bin:$PATH"' >> /root/$shell;done || (cd /root/.tfenv && git pull 2>&1 | grep -E "(Updating|Already|Fast-forward)" && cd -) || true
  - |
    export HOME=/root;curl -fsSL https://claude.ai/install.sh | bash -s 1.0.81;CL="/root/.local/bin/claude";CT=$(readlink "$CL" || true);[ -n "$CT" ] && [ -e "$CT" ] && ln -sf $(realpath --relative-to="$(dirname "$CL")" "$CT") "$CL";echo "export ENABLE_BACKGROUND_TASKS=1" >> /root/.{bashrc,zshrc}
  - |
    git clone https://github.com/40docs/dotfiles.git /root/dotfiles && cd /root/dotfiles && export NVM_DIR="/usr/local/nvm" DOTFILES_USER=root HOME=/root SKIP_TFENV_INSTALL=1 MESLO_FONTS_INSTALLED=true && [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" && [ -f ./install.sh ] && chmod +x ./install.sh && bash install.sh --cloud-init;cd - || true
  - |
    export NVM_DIR="/usr/local/nvm";[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh";command -v npm >/dev/null 2>&1 && ! npm list -g @azure/mcp --depth=0 >/dev/null 2>&1 && npm cache clear --force && npm install -g --unsafe-perm @azure/mcp-linux-x64 @azure/mcp || true
  - |
    [ -n "${var_arm_client_id}" ] && [ -n "${var_arm_client_secret}" ] && [ -n "${var_arm_tenant_id}" ] && [ -n "${var_aks_resource_group}" ] && [ -n "${var_aks_cluster_name}" ] && az login --service-principal --username "${var_arm_client_id}" --password "${var_arm_client_secret}" --tenant "${var_arm_tenant_id}" --output none && az account set --subscription "${var_arm_subscription_id}" --output none && mkdir -p /root/.kube/ && chmod 700 /root/.kube/ && az aks get-credentials --resource-group "${var_aks_resource_group}" --name "${var_aks_cluster_name}" --file /root/.kube/config --overwrite-existing --output none && chmod 400 /root/.kube/config && for shell in .bashrc .profile .zshrc;do echo 'export KUBECONFIG=$HOME/.kube/config' >> /root/$shell;done && kubectl cluster-info --request-timeout=30s || true
  - |
    useradd -D -s "$(which zsh)";sed -i -E 's|^#?DSHELL=.*|DSHELL=/usr/bin/zsh|' /etc/adduser.conf
  - |
    echo 'ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true' | debconf-set-selections;DEBIAN_FRONTEND=noninteractive apt-get update -qq && apt-get full-upgrade -y && apt-get install -y ttf-mscorefonts-installer ubuntu-restricted-extras libavcodec-extra libavcodec-extra60 ubuntu-restricted-addons unrar;dpkg --configure -a;apt-get install -f -y
  - python3 -m pip install --break-system-packages --ignore-installed urllib3 aider-install black checkov pre-commit mkdocs-material SuperClaude
  - |
    mkdir -p /usr/share/fonts/powerline /etc/fonts/conf.avail;[ ! -f /usr/share/fonts/powerline/PowerlineSymbols.otf ] && curl -L https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf -o /usr/share/fonts/powerline/PowerlineSymbols.otf;[ ! -f /etc/fonts/conf.avail/10-powerline-symbols.conf ] && curl -L https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf -o /etc/fonts/conf.avail/10-powerline-symbols.conf;mkdir -p /usr/share/fonts/truetype/meslo /root/.local/share/fonts;FD=/usr/share/fonts/truetype/meslo;UF=/root/.local/share/fonts;has_mf(){ ls $FD/MesloLG*.ttf >/dev/null 2>&1||ls $UF/MesloLG*.ttf >/dev/null 2>&1||fc-list 2>/dev/null|grep -qi meslo;};has_mf||{ TD=$(mktemp -d);for a in 1 2 3;do curl -fsSL --connect-timeout 30 --max-time 300 https://github.com/ryanoasis/nerd-fonts/releases/download/v3.3.0/Meslo.zip -o $TD/Meslo.zip && DS=true && break||sleep $((a*5));done;[ "$DS" = true ] && unzip $TD/Meslo.zip -d $TD && find $TD -name "MesloLG*.ttf" -exec cp {} $FD/ \; && find $TD -name "Meslo*.ttf" -exec cp {} $FD/ \; && find $TD -name "MesloLG*.ttf" -exec cp {} $UF/ \; && chmod 644 $FD/*.ttf $UF/*.ttf;rm -rf $TD;};fc-cache -f;has_mf && echo 'export MESLO_FONTS_INSTALLED=true' >> /etc/environment || true
  - |
    export HOME=/root
    echo "Installing Lacework CLI..."
    if curl -s https://raw.githubusercontent.com/lacework/go-sdk/main/cli/install.sh | bash -s -- 2>&1 | grep -E "(Installing|Downloading|SUCCESS|installed)"; then
      echo 'source <(lacework completion bash)' >> /root/.bashrc
      echo 'export OLLAMA_API_BASE=http://127.0.0.1:11434' >> /root/.bashrc
      for COMP in sca iac remediate vuln-scanner; do
        echo "  Installing Lacework component: $COMP"
        lacework component install "$COMP" 2>&1 | grep -E "(Installing|Success|already|failed)" || echo "    Warning: $COMP installation may have failed"
      done
      mkdir -p /root/tmp && cd /root/tmp && lacework iac scan 2>&1 | grep -E "(Scanning|vulnerabilities|passed)" || true && cd -
    fi
  - curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash -s --
  - |
    export HOME=/root/.ollama
    echo "Installing Ollama..."
    if curl -fsSL https://ollama.com/install.sh | sh 2>&1 | grep -E "(Installing|Downloading|SUCCESS|complete)"; then
      systemctl start ollama.service && systemctl enable ollama.service


      wr(){ local a=1;while [ $a -le 30 ];do ollama list >/dev/null 2>&1 && return 0;sleep 5;a=$((a+1));done;return 1;};dm(){ local m="$1" r=3;for a in $(seq 1 $r);do timeout 1800 ollama pull "$m" && ollama list|grep -q "$m" && return 0||sleep 10;done;return 1;};wr && [ $(($(df /root/.ollama|awk 'NR==2{print $4}')/1024/1024)) -ge 25 ] && { CS=0;for m in deepseek-r1:latest;do dm "$m" && CS=$((CS+1));done;OS=0;for m in gpt-oss:20b;do dm "$m" && OS=$((OS+1));done;[ $CS -eq 1 ] && echo "export OLLAMA_CRITICAL_MODELS_READY=true" >> /etc/environment;[ $((CS+OS)) -eq 2 ] && echo "export OLLAMA_ALL_MODELS_READY=true" >> /etc/environment;find /tmp -name "ollama_*_attempt_*.log" -mmin +60 -delete 2>/dev/null || true;}

    else
      echo "❌ Ollama installation failed, skipping model downloads"
    fi
    for shell in .zshrc .bashrc; do
      printf '%s\n' \
        'export OLLAMA_API_BASE=http://127.0.0.1:11434' \
        'export BRAVE_API_KEY="${var_brave_api_key}"' \
        'export PERPLEXITY_API_KEY="${var_perplexity_api_key}"' \
        >> /root/$shell
    done
  - curl -s https://fluxcd.io/install.sh | bash -s --
  - |
    mkdir -p /root/.local/state/vs-kubernetes/tools/kubectl/
    ln -sf `which kubectl` /root/.local/state/vs-kubernetes/tools/kubectl/kubectl
  - curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/nektos/act/master/install.sh | bash -s -- -b /usr/local/bin
  - |\n    iac(){ case $1 in apt)apt-get update -y && apt-get install -y awscli;;pip)python3 -m venv /opt/aws-cli-venv && . /opt/aws-cli-venv/bin/activate && pip install --upgrade pip awscli && ln -sf /opt/aws-cli-venv/bin/aws /usr/local/bin/aws && deactivate;;v2)export PYTHONIOENCODING=utf-8 LC_ALL=C.UTF-8 LANG=C.UTF-8 PROMPT_TOOLKIT_NO_CPR=1;curl -sSL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o /tmp/awscliv2.zip && cd /tmp && unzip -q awscliv2.zip && [ -f /tmp/aws/install ] && /tmp/aws/install && rm -rf /tmp/aws /tmp/awscliv2.zip;;snap)snap install aws-cli --classic;;esac && command -v aws && timeout 10 aws --version;};for m in apt pip v2 snap;do iac $m && S=true && break||{ rm -rf /tmp/aws* /opt/aws-cli-venv;sleep 2;};done;[ $S = true ] && mkdir -p /root/.aws && echo 'complete -C /usr/local/bin/aws_completer aws' >> /root/.bashrc && printf '[default]\\nregion=us-east-1\\noutput=json\\ncli_pager=\\nmax_attempts=3\\nretry_mode=adaptive' > /root/.aws/config || true"
  - |
    exec 0</dev/null 1>/var/log/ansible-collections-install.log 2>&1;for i in 1 2 3;do timeout 300 ansible-galaxy collection install fortinet.console fortinet.fortiadc fortinet.fortianalyzer fortinet.fortiflexvm fortinet.fortimanager fortinet.fortios fortinet.fortiswitch fortinet.fortiweb --force-with-deps && ansible-galaxy collection list | grep fortinet && break||sleep $((i*10));done;exec 1>/proc/self/fd/1 2>/proc/self/fd/2
  - export HOME=/root && bash /root/npm-install.sh || true
  - |
    export HOME=/root;dotnet tool install --global Microsoft.CST.DevSkim.CLI;dotnet dev-certs https --trust
  - |
    for IMG in ghcr.io/40docs/devcontainer:latest mcp/memory:latest mcp/git:latest mcp/time:latest mcp/sequentialthinking:latest mcp/filesystem:latest kubernetes-mcp-server:latest hashicorp/terraform-mcp-server:latest ghcr.io/github/github-mcp-server;do docker pull "$IMG" 2>&1 | grep -E "(Pulling|Pull complete|Image is up to date|Downloaded newer)" || true;done;usermod -aG docker ${var_admin_username} || true
%{ if var_has_gpu ~}
    docker run --privileged --rm tonistiigi/binfmt --install all || true
  - |
    nvidia-persistenced --user ${var_admin_username}
    systemctl enable nvidia-persistenced
    nvidia-smi -pm ENABLED || true
    nvidia-ctk runtime configure --runtime=docker
    systemctl restart docker
    sleep 10
    usermod -aG render ${var_admin_username}
    echo 'KERNEL=="nvidia*", GROUP="render", MODE="0666"' > /etc/udev/rules.d/70-nvidia.rules
    echo 'KERNEL=="nvidia_uvm", GROUP="render", MODE="0666"' >> /etc/udev/rules.d/70-nvidia.rules
    echo 'KERNEL=="nvidia_modeset", GROUP="render", MODE="0666"' >> /etc/udev/rules.d/70-nvidia.rules
    echo 'KERNEL=="nvidiactl", GROUP="render", MODE="0666"' >> /etc/udev/rules.d/70-nvidia.rules
    udevadm control --reload-rules
    udevadm trigger
    nvidia-smi || true
    if docker info | grep -q nvidia; then
      docker run --rm --gpus all ubuntu nvidia-smi || true
    fi
%{ endif ~}
  - "service apache2 stop && systemctl disable apache2"
  - |
    set -eu;export HOME=/root;for i in 1 2 3;do curl -fsSL https://coder.com/install.sh | sh -s -- && break || sleep 10;done;usermod -aG docker coder;mkdir -p /etc/coder.d /etc/systemd/system/coder.service.d;printf 'CODER_HTTP_ADDRESS=0.0.0.0:80\nCODER_TUNNEL_ENABLE=true\nCODER_DERP_FORCE_WEBSOCKETS=true\nCODER_TUNNEL_PREFER_IPV4=true\n' > /etc/coder.d/coder.env;printf '[Service]\nCapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK CAP_NET_BIND_SERVICE CAP_NET_RAW CAP_NET_ADMIN\nAmbientCapabilities=CAP_IPC_LOCK CAP_NET_BIND_SERVICE CAP_NET_RAW CAP_NET_ADMIN\nTimeoutStartSec=120\nRestartSec=10\nStartLimitBurst=5\nStartLimitIntervalSec=300\n' > /etc/systemd/system/coder.service.d/override.conf;systemctl daemon-reload && systemctl enable coder && systemctl start coder
  - |
    ARCH=$(dpkg-architecture -q DEB_BUILD_ARCH);download_url=$(curl -s "https://api.github.com/repos/jgraph/drawio-desktop/releases/latest" | jq -r --arg ARCH "$ARCH" '.assets[] | select(.name | contains("deb") and contains($ARCH)) | .browser_download_url');curl -s -L "$${download_url}" -o /tmp/drawio.deb;apt-get update && apt-get install -y /tmp/drawio.deb || (apt-get install -f -y && dpkg -i /tmp/drawio.deb);rm -f /tmp/drawio.deb
  - |
    curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb;dpkg -i minikube_latest_amd64.deb;mkdir -p /root/.local/state/vs-kubernetes/tools/minikube/linux-amd64;ln -sf /usr/bin/minikube /root/.local/state/vs-kubernetes/tools/minikube/linux-amd64/minikube;rm minikube_latest_amd64.deb
  - |
    curl -Lo /tmp/actionlint.sh https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash;chmod 755 /tmp/actionlint.sh;export HOME=/root && bash /tmp/actionlint.sh latest /usr/bin;rm /tmp/actionlint.sh
  - |
    curl -sSLo /tmp/terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.20.0/terraform-docs-v0.20.0-linux-amd64.tar.gz;tar --extract --gzip --file /tmp/terraform-docs.tar.gz --directory /usr/local/bin terraform-docs;chmod +x /usr/local/bin/terraform-docs;rm -f /tmp/terraform-docs.tar.gz
  - |
    curl -Lo /tmp/terrascan.tar.gz https://github.com/tenable/terrascan/releases/download/v1.19.9/terrascan_1.19.9_Linux_x86_64.tar.gz;tar -xf /tmp/terrascan.tar.gz terrascan;install terrascan /usr/local/bin;rm -rf /tmp/terrascan.tar.gz terrascan
  - |
    LV=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | \grep -Po '"tag_name": *"v\K[^"]*');curl -Lo /tmp/lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/download/v$${LV}/lazygit_$${LV}_Linux_x86_64.tar.gz";tar xf /tmp/lazygit.tar.gz lazygit;install lazygit -D -t /usr/local/bin/;rm -rf /tmp/lazygit.tar.gz lazygit
  - curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
  - |
    curl -Lo /tmp/kustomize.sh "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh";chmod 755 /tmp/kustomize.sh;export HOME=/root && bash /tmp/kustomize.sh /usr/local/bin;rm /tmp/kustomize.sh
  - |
    curl -sSLo /tmp/speedtest.tgz https://install.speedtest.net/app/cli/ookla-speedtest-1.2.0-linux-x86_64.tgz;tar --extract --gzip --file /tmp/speedtest.tgz --directory /usr/local/bin speedtest;chmod +x /usr/local/bin/speedtest;rm -f /tmp/speedtest.tgz;for shell in .bash_aliases .zshrc .bashrc;do echo 'alias speedtest="speedtest --accept-license --accept-gdpr"' >> /root/$shell;done
  - |
    export PROVIDER=all;curl -LO "https://github.com/GoogleCloudPlatform/terraformer/releases/download/$(curl -s https://api.github.com/repos/GoogleCloudPlatform/terraformer/releases/latest | grep tag_name | cut -d '"' -f 4)/terraformer-$${PROVIDER}-linux-amd64";chmod +x terraformer-$${PROVIDER}-linux-amd64;mv terraformer-$${PROVIDER}-linux-amd64 /usr/local/bin/terraformer
  - |
    export "GOBIN=/usr/local/bin"
    echo "Installing Go development tools..."

    if go install github.com/Azure/aztfexport@latest; then
      echo "✅ aztfexport installed successfully"
    else
      echo "❌ Failed to install aztfexport" >&2
      exit 1
    fi

    if go install golang.org/x/tools/gopls@latest; then
      echo "✅ gopls installed successfully"
    else
      echo "❌ Failed to install gopls" >&2
      exit 1
    fi

    if go install honnef.co/go/tools/cmd/staticcheck@latest; then
      echo "✅ staticcheck installed successfully"
    else
      echo "❌ Failed to install staticcheck" >&2
      exit 1
    fi

    echo "Verifying Go tool installations..."
    for tool in aztfexport gopls staticcheck; do
      if command -v "$tool" >/dev/null 2>&1; then
        echo "✅ $tool: $(which $tool)"
      else
        echo "❌ $tool: MISSING" >&2
        exit 1
      fi
    done
    echo "All Go tools installed and verified successfully"
%{ if var_has_gpu ~}
  - |
    set -eu

    echo "Installing XMRig..."

    for cmd in cmake make; do
      if ! command -v $cmd >/dev/null 2>&1; then
        echo "❌ Missing required command: $cmd" >&2
        exit 1
      fi
    done

    if ! pkg-config --exists hwloc; then
      echo "❌ Missing required library: hwloc" >&2
      exit 1
    fi

    (
      if git clone https://github.com/xmrig/xmrig.git /root/xmrig; then
        echo "✅ XMRig repository cloned successfully"
      else
        echo "❌ Failed to clone XMRig repository" >&2
        exit 1
      fi

      cd /root/xmrig || exit 1
      mkdir -p build && cd build || exit 1

      if cmake ..; then
        echo "✅ XMRig cmake configuration successful"
      else
        echo "❌ Failed to configure XMRig with cmake" >&2
        exit 1
      fi

      if make -j$(nproc); then
        echo "✅ XMRig compilation successful"
      else
        echo "❌ Failed to compile XMRig" >&2
        exit 1
      fi

      if install -m 0755 xmrig /usr/local/bin/xmrig; then
        echo "✅ XMRig installed to /usr/local/bin"
      else
        echo "❌ Failed to install XMRig binary" >&2
        exit 1
      fi
    )

    rm -rf /root/xmrig

    if command -v xmrig >/dev/null 2>&1; then
      echo "✅ XMRig verified: $(which xmrig)"
    else
      echo "❌ XMRig not found after installation" >&2
      exit 1
    fi
%{ else ~}
  - echo "⏸️ Skipping XMRig installation (GPU not detected)"
%{ endif ~}
  - update-alternatives --set editor /usr/bin/vim.basic
  - |
    echo "Installing Lacework reporting agent..."

    cd /tmp || { echo "Failed to change to /tmp directory" >&2; exit 1; }

    LACEWORK_VERSION=$(curl -s "https://api.github.com/repos/robinmordasiewicz/extensible-reporting/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
    if [ -z "$LACEWORK_VERSION" ]; then
      echo "❌ Failed to get Lacework version from GitHub API" >&2
      exit 1
    fi
    echo "Downloading Lacework agent version: $LACEWORK_VERSION"

    if curl -L -o lw_report_gen "https://github.com/robinmordasiewicz/extensible-reporting/releases/download/v$${LACEWORK_VERSION}/lw_report_gen_linux_x86_64"; then
      echo "✅ Lacework agent downloaded successfully"
    else
      echo "❌ Failed to download Lacework agent" >&2
      exit 1
    fi

    if install lw_report_gen /usr/local/bin; then
      echo "✅ Lacework agent installed to /usr/local/bin"
    else
      echo "❌ Failed to install Lacework agent" >&2
      exit 1
    fi

    rm lw_report_gen
    cd - || exit 1

    if command -v lw_report_gen >/dev/null 2>&1; then
      echo "✅ Lacework agent verified: $(which lw_report_gen)"
    else
      echo "❌ Lacework agent not found after installation" >&2
      exit 1
    fi
  - |
    echo "[$(date)] Implementing SSH security hardening..." >> /var/log/security-events.log;mkdir -p /var/log/security;touch /var/log/security-events.log /var/log/security-report.log;chmod 640 /var/log/security-events.log /var/log/security-report.log;ufw --force reset;ufw default deny incoming;ufw default allow outgoing;ufw limit ssh comment "SSH with rate limiting";ufw allow out 53 comment "DNS outgoing";ufw allow out 80 comment "HTTP outgoing";ufw allow out 443 comment "HTTPS outgoing";ufw allow out 123 comment "NTP outgoing";ufw allow from 172.16.0.0/12 comment "Docker networks";ufw allow from 10.0.0.0/8 comment "Internal networks";ufw allow from 192.168.0.0/16 comment "Private networks";ufw --force enable;systemctl stop fail2ban 2>/dev/null || true;chown root:root /etc/fail2ban/jail.d/cloudshell-custom.conf /etc/fail2ban/filter.d/sshd-aggressive.conf /etc/fail2ban/action.d/cloudshell-notify.conf;systemctl restart rsyslog;systemctl enable fail2ban;systemctl start fail2ban;sleep 5;for jail in sshd sshd-aggressive recidive;do fail2ban-client status "$jail" >/dev/null 2>&1||{ fail2ban-client reload 2>/dev/null;sleep 2;};done;systemctl daemon-reload;systemctl enable security-monitor.service security-report.timer;systemctl start security-monitor.service security-report.timer;/usr/local/bin/security-monitor.sh geoip;/usr/local/bin/security-monitor.sh report;apt-get update -qq;apt-get install -y geoip-bin geoip-database lynis chkrootkit rkhunter logwatch 2>/dev/null || true

    cat > /etc/logrotate.d/security-logs << 'EOF'
/var/log/security-events.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    copytruncate
    postrotate
        logger -p auth.info "Security log rotated"
    endscript
}

/var/log/security-report.log {
    weekly
    missingok
    rotate 12
    compress
    delaycompress
    notifempty
    copytruncate
}
EOF

    echo "0 */6 * * * root /usr/local/bin/ssh-security-check.sh >> /var/log/security-report.log 2>&1" > /etc/cron.d/ssh-security-check

    echo "Restarting SSH service to apply security hardening..."
    systemctl restart ssh

    if systemctl is-active ssh >/dev/null 2>&1; then
        echo "✅ SSH service restarted successfully with hardened configuration"
        echo "[$(date)] SSH security hardening completed successfully" >> /var/log/security-events.log

        echo "=== Security Hardening Summary ===" >> /var/log/security-events.log
        echo "UFW Status: $(ufw status | head -1)" >> /var/log/security-events.log
        echo "Fail2ban Status: $(systemctl is-active fail2ban)" >> /var/log/security-events.log
        echo "SSH Max Auth Tries: $(sshd -T | grep maxauthtries)" >> /var/log/security-events.log
        echo "Password Auth: $(sshd -T | grep passwordauthentication)" >> /var/log/security-events.log
        echo "Security Monitor: $(systemctl is-active security-monitor.service)" >> /var/log/security-events.log
        echo "===============================" >> /var/log/security-events.log

        /usr/local/bin/ssh-security-check.sh >> /var/log/security-report.log 2>&1 || true
    else
        echo "❌ SSH service failed to restart - checking configuration" >&2
        sshd -t || true
        systemctl status ssh || true
    fi
  - |
    echo "[$(date)] Starting enhanced SSH attack analysis..." >> /var/log/security-events.log

    if [ -f /var/log/auth.log ]; then
        echo "Analyzing recent SSH attacks..."

        ATTACK_IPS=$(grep "$(date '+%Y-%m-%d')" /var/log/auth.log | grep -E "Failed password|Invalid user" | awk '{print $(NF-3)}' | sort | uniq -c | sort -nr | awk '$1 >= 3 {print $2}' | head -20)

        if [ -n "$ATTACK_IPS" ]; then
            echo "Pre-banning persistent attackers:"
            echo "$ATTACK_IPS" | while read -r ip; do
                if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
                    if ! echo "$ip" | grep -E '^(10\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[0-1])\.)'; then
                        echo "  Banning attacker IP: $ip"
                        fail2ban-client set sshd banip "$ip" 2>/dev/null || true
                        echo "[$(date)] Pre-banned persistent attacker: $ip" >> /var/log/security-events.log
                    fi
                fi
            done
        fi

        echo "=== Immediate Threat Assessment - $(date) ===" >> /var/log/security-events.log
        echo "Recent attack summary:" >> /var/log/security-events.log
        grep "$(date '+%Y-%m-%d')" /var/log/auth.log | grep -E "Failed password|Invalid user" | awk '{print $(NF-3)}' | sort | uniq -c | sort -nr | head -10 >> /var/log/security-events.log 2>/dev/null || echo "No attacks detected today" >> /var/log/security-events.log
        echo "=========================================" >> /var/log/security-events.log
    fi

    cat > /usr/local/bin/ssh-attack-alert.sh << 'EOSCRIPT'
set -euo pipefail

ALERT_THRESHOLD=10
TIME_WINDOW=300  # 5 minutes
LOG_FILE="/var/log/auth.log"
ALERT_LOG="/var/log/security-events.log"

count_recent_failures() {
    local ip="$1"
    local since_time
    since_time=$(date -d "-$${TIME_WINDOW} seconds" '+%Y-%m-%d %H:%M:%S')

    grep "$since_time" "$LOG_FILE" 2>/dev/null | grep -E "Failed password|Invalid user" | grep "$ip" | wc -l || echo "0"
}

if [ -f "$LOG_FILE" ]; then
    tail -f "$LOG_FILE" | while read -r line; do
        if echo "$line" | grep -qE "Failed password|Invalid user"; then
            IP=$(echo "$line" | awk '{print $(NF-3)}')
            if [[ $IP =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
                FAIL_COUNT=$(count_recent_failures "$IP")
                if [ "$FAIL_COUNT" -ge "$ALERT_THRESHOLD" ]; then
                    echo "[$(date)] CRITICAL ALERT: Rapid attack from $IP - $FAIL_COUNT failures in $${TIME_WINDOW}s" >> "$ALERT_LOG"
                    logger -p auth.crit "CRITICAL SSH ATTACK: IP $IP has $FAIL_COUNT failures in $${TIME_WINDOW} seconds"

                    fail2ban-client set sshd banip "$IP" 2>/dev/null || true
                fi
            fi
        fi
    done &
fi
EOSCRIPT

    chmod +x /usr/local/bin/ssh-attack-alert.sh

    nohup /usr/local/bin/ssh-attack-alert.sh > /dev/null 2>&1 &
    echo "✅ Real-time SSH attack alerting enabled"
  - curl -s https://ohmyposh.dev/install.sh | HOME=/root bash -s -- -d /usr/local/bin -t /var/local/themes
  - curl -fsSL https://raw.githubusercontent.com/smtg-ai/claude-squad/main/install.sh | HOME=/root bash -s --
  - |
    export HOME=/root PATH="/root/.local/bin:$PATH"
    if command -v claude >/dev/null 2>&1; then
        CLAUDE_PATH=$(which claude) && ln -sf "$CLAUDE_PATH" "$(dirname "$CLAUDE_PATH")/claude_cli"
    elif [ -f "/root/.local/bin/claude" ]
    then
        ln -sf "/root/.local/bin/claude" "/root/.local/bin/claude_cli"
    fi
    if command -v SuperClaude >/dev/null 2>&1; then
      echo "Installing SuperClaude developer profile..."
      timeout 300 bash -c 'printf "y\ny\n" | SuperClaude install --profile developer' 2>&1 | grep -E "(Installing|Success|complete|configured)" || echo "SuperClaude installation may have failed"
    fi
  - |
    mkdir -p /root/.config/systemd/user /root/bin;printf '[Unit]\nDescription=VS Code Remote Tunnel\nAfter=network.target\n[Service]\nExecStart=%h/bin/start-tunnel.sh\nRestart=always\nTimeoutStartSec=10\n[Install]\nWantedBy=default.target\n' > /root/.config/systemd/user/vscode-tunnel.service;printf '#!/bin/bash\nexec code tunnel --accept-server-license-terms --name=$(hostname)-$USER\n' > /root/bin/start-tunnel.sh;chmod +x /root/bin/start-tunnel.sh
  - |
    bash /root/prewarm-cache.sh || true;touch /root/.hushlogin
  - |
    for dir in .act .aspnet .azure .bash_aliases .bashrc .cache .config .claude .claude.json .digrc .dotnet .gitconfig .hushlogin .kube .lacework.toml .launchpadlib .local .npm .npmrc .nuget .oh-my-posh .opencommit .p10k.zsh .profile .terraform.d .tfenv .tmux .tmux.conf .vim .vimrc .vscode .vscode-insiders .vscode-server .vscode-server-insiders .wget-hsts .z .zshrc dotfiles 40docs go bin snap;do [ -e /root/$dir ] && cp -a /root/$dir /etc/skel || true;done;mkdir -p /root/.claude;[ -f /root/.claude/mcp.json ] && jq '.mcpServers.Perplexity.env.PERPLEXITY_API_KEY = "'"${var_perplexity_api_key}"'"' /root/.claude/mcp.json > /tmp/mcp.json && mv /tmp/mcp.json /root/.claude/mcp.json && jq '.mcpServers["brave-search"].env.BRAVE_API_KEY = "'"${var_brave_api_key}"'"' /root/.claude/mcp.json > /tmp/mcp.json && mv /tmp/mcp.json /root/.claude/mcp.json
  - |
    echo "Starting GitHub Actions Runner setup..." >> /var/log/runner-setup.log;timeout 600 bash /opt/setup-github-runner.sh >> /var/log/runner-setup.log 2>&1 && echo "GitHub Actions Runner setup completed successfully" >> /var/log/runner-setup.log || echo "GitHub Actions Runner setup failed or timed out - check /var/log/runner-setup.log for details" >> /var/log/runner-setup.log
  - |
    fwupdmgr update -y --no-reboot-check || true;[ -f /var/run/reboot-required ] && reboot || true
