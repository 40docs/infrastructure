#cloud-config
timezone: America/Toronto
package_update: true
package_upgrade: true
package_reboot_if_required: true

power_state:
  delay: now
  mode: reboot
  message: Rebooting after cloud-init
  timeout: 30
  condition: true


bootcmd:
  - mkdir -p /home /var/lib/docker /root/.ollama
  - |
    exec > >(tee -a /var/log/cloudshell-setup.log) 2>&1
    log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"; }
    format_and_mount() {
      local lun="$1" label="$2" mount_point="$3" always_format="$4"
      local dev="/dev/disk/azure/scsi1/lun$${lun}" part="$${dev}-part1"
      log "Setting up disk LUN $lun for $mount_point"
      for i in $(seq 1 30); do
        if [ -b "$dev" ]; then log "Device $dev detected"; break; fi
        if [ "$i" -eq 30 ]; then log "ERROR: Device $dev timeout"; return 1; fi
        sleep 2
      done
      if [ "$always_format" = "yes" ]; then
        mount | grep -q "$part" && { log "Unmounting $part"; umount -f "$part" 2>/dev/null || true; }
        log "Formatting $dev"
        wipefs -a "$dev" 2>/dev/null || true
        parted -s "$dev" mklabel gpt mkpart primary ext4 0% 100% && mkfs.ext4 -F "$part" -L "$label" || return 1
      else
        blkid "$part" >/dev/null 2>&1 || { log "Creating filesystem on $dev"; parted -s "$dev" mklabel gpt mkpart primary ext4 0% 100% && mkfs.ext4 -F "$part" -L "$label" || return 1; }
      fi
    }
    format_and_mount 0 homefs /home yes || log "ERROR: Home disk failed"
    format_and_mount 1 dockerfs /var/lib/docker no || log "ERROR: Docker disk failed"
    format_and_mount 2 ollamafs /root/.ollama no || log "ERROR: Ollama disk failed"

mounts:
  - ["LABEL=homefs", "/home", "ext4", "defaults,nofail", "0", "2"]
  - ["LABEL=dockerfs", "/var/lib/docker", "ext4", "defaults,nofail", "0", "2"]
  - ["LABEL=ollamafs", "/root/.ollama", "ext4", "defaults,nofail", "0", "2"]

apt:
  sources:
    authd:
      source: ppa:ubuntu-enterprise-desktop/authd
    dotnet:
      source: ppa:dotnet/backports
    ansible:
      source: ppa:ansible/ansible
%{ if var_has_gpu ~}
    nvtop:
      source: ppa:quentiumyt/nvtop
    nvidia:
      source: ppa:graphics-drivers/ppa
%{ endif ~}
    trivy:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://get.trivy.dev/deb generic main
      keyserver: https://get.trivy.dev/deb/public.key
      keyid: E9D0A3616276FA6C
    hashicorp:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://apt.releases.hashicorp.com $RELEASE main
      keyserver: https://apt.releases.hashicorp.com/gpg
      keyid: AA16FCBCA621E701
    github-cli:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://cli.github.com/packages stable main
      keyserver: https://cli.github.com/packages/githubcli-archive-keyring.gpg
      keyid: 23F3D4EA75716059
    google-cloud-sdk:
      source: deb [arch=amd64 signed-by=$KEY_FILE] http://packages.cloud.google.com/apt cloud-sdk main
      keyserver: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      keyid: C0BA5CE6DC6315A3
    google-chrome:
      source: deb [arch=amd64 signed-by=$KEY_FILE] http://dl.google.com/linux/chrome/deb/ stable main
      keyserver: https://dl-ssl.google.com/linux/linux_signing_key.pub
      keyid: 7721F63BD38B4796
    docker:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://download.docker.com/linux/ubuntu noble stable
      keyserver: https://download.docker.com/linux/ubuntu/gpg
      keyid: 8D81803C0EBFCD88
%{ if var_has_gpu ~}
    nvidia-container-toolkit:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://nvidia.github.io/libnvidia-container/stable/deb/$(ARCH) /
      keyserver: https://nvidia.github.io/libnvidia-container/gpgkey
      keyid: DDCAE044F796ECB0
%{ endif ~}
    azure-cli:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://packages.microsoft.com/repos/azure-cli/ $RELEASE main
      keyserver: https://packages.microsoft.com/keys/microsoft.asc
      keyid: EB3E94ADBE1229CF
    vscode:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://packages.microsoft.com/repos/vscode stable main
      keyserver: https://packages.microsoft.com/keys/microsoft.asc
      keyid: EB3E94ADBE1229CF
    powershell:
      source: deb [arch=amd64 signed-by=$KEY_FILE] https://packages.microsoft.com/ubuntu/24.04/prod $RELEASE main
      keyserver: https://packages.microsoft.com/keys/microsoft.asc
      keyid: EB3E94ADBE1229CF
    ubuntu-universe:
      source: "deb http://archive.ubuntu.com/ubuntu $RELEASE universe"
    ubuntu-multiverse:
      source: "deb http://archive.ubuntu.com/ubuntu $RELEASE multiverse"

write_files:
  - path: /opt/setup-github-runner.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/bin/bash
      set -euo pipefail
      RUNNER_VERSION="2.321.0"
      LOGFILE="/var/log/github-runner-setup.log"
      log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] [RUNNER] $1" | tee -a "$LOGFILE"; }
      retry() { for i in 1 2 3; do eval "$1" && return 0 || sleep 5; done; return 1; }
      main() {
        log "Installing GitHub Actions runner..."
        export ORG_URL="https://github.com/${var_github_org}" GITHUB_TOKEN="${var_github_token}" RUNNER_GROUP="${var_runner_group}"
        [ -z "$GITHUB_TOKEN" ] && { log "ERROR: No token"; exit 1; }
        LABELS_BASE="${var_runner_labels}"
        export RUNNER_LABELS="$([ "$LABELS_BASE" = "$${LABELS_BASE##*CLOUDSHELL*}" ] && echo "$LABELS_BASE,CLOUDSHELL,cloudshell" || echo "$LABELS_BASE")"
        export RUNNER_NAME="$(hostname)"
        for cmd in curl jq tar; do command -v $cmd >/dev/null || { log "ERROR: $cmd missing"; exit 1; }; done
        if ! id -u ubuntu >/dev/null 2>&1; then
          useradd -m -s /bin/bash ubuntu && usermod -aG sudo,docker,adm ubuntu
          mkdir -p /home/ubuntu/.ssh && chown -R ubuntu:ubuntu /home/ubuntu/.ssh && chmod 700 /home/ubuntu/.ssh
        fi
        for f in .bashrc .profile; do
          grep -q 'NVM_DIR=/usr/local/nvm' /home/ubuntu/$f 2>/dev/null || {
            echo 'export PATH="$$HOME/.local/bin:/usr/local/bin:$$PATH"' >> /home/ubuntu/$f
            echo 'export NVM_DIR=/usr/local/nvm' >> /home/ubuntu/$f
            echo '[ -s "$$NVM_DIR/nvm.sh" ] && \\. "$$NVM_DIR/nvm.sh"' >> /home/ubuntu/$f
            echo 'export PATH="/usr/local/lib/node_modules/.bin:$$PATH"' >> /home/ubuntu/$f
          }
        done
        DEVCONTAINER_PATH=$(find /usr/local/nvm -name devcontainer -type f 2>/dev/null | head -1)
        [ -n "$DEVCONTAINER_PATH" ] && ln -sf "$DEVCONTAINER_PATH" /usr/local/bin/devcontainer
        RUNNER_DIR="/home/ubuntu/actions-runner" SERVICE_NAME="actions.runner.${var_github_org}.$RUNNER_NAME"
        [ -d "$RUNNER_DIR" ] && { systemctl stop "$SERVICE_NAME" 2>/dev/null || true; rm -rf "$RUNNER_DIR"; }
        mkdir -p "$RUNNER_DIR" && chown -R ubuntu:ubuntu "$RUNNER_DIR" && cd "$RUNNER_DIR"
        RUNNER_URL="https://github.com/actions/runner/releases/download/v$${RUNNER_VERSION}/actions-runner-linux-x64-$${RUNNER_VERSION}.tar.gz"
        retry "curl -o actions-runner.tar.gz -L '$RUNNER_URL'" || { log "Download failed"; exit 1; }
        sudo -u ubuntu tar xzf ./actions-runner.tar.gz && rm -f actions-runner.tar.gz
        [ -f "./bin/installdependencies.sh" ] && ./bin/installdependencies.sh >/dev/null 2>&1 || true
        REG_TOKEN_RESPONSE=$(curl -s -X POST -H 'Accept: application/vnd.github.v3+json' -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/orgs/${var_github_org}/actions/runners/registration-token")
        REG_TOKEN=$(echo "$REG_TOKEN_RESPONSE" | jq -r '.token')
        [ -z "$REG_TOKEN" ] || [ "$REG_TOKEN" = "null" ] && { log "Token failed"; exit 1; }
        CONFIG_CMD="sudo -u ubuntu ./config.sh --url \"$ORG_URL\" --token \"$REG_TOKEN\" --name \"$RUNNER_NAME\" --work \"_work\" --unattended --replace --labels \"$RUNNER_LABELS\""
        [ -n "$RUNNER_GROUP" ] && CONFIG_CMD="$CONFIG_CMD --runnergroup \"$RUNNER_GROUP\""
        eval "$CONFIG_CMD" || { log "Config failed"; exit 1; }
        ./svc.sh install ubuntu && systemctl daemon-reload && systemctl enable "$SERVICE_NAME" && systemctl start "$SERVICE_NAME"
        log "Runner installed: $RUNNER_LABELS"
      }
      main "$@"

  - path: /etc/ssh/sshd_config.d/custom.conf
    content: |
      UsePAM yes
      KbdInteractiveAuthentication yes
      PrintMotd no
      PrintLastLog no
      UseDNS no

  - path: /root/prewarm-cache.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/bin/bash
      exec > >(tee -a /var/log/cloudshell-setup.log) 2>&1
      for i in {1..30}; do command -v code >/dev/null 2>&1 && break; sleep 2; done
      command -v code >/dev/null 2>&1 && timeout 300 bash -c 'code --install-extension ms-python.python --force 2>/dev/null; code --install-extension ms-vscode.docker --force 2>/dev/null; code --install-extension hashicorp.terraform --force 2>/dev/null' || true

  - path: /etc/profile.d/nvm.sh
    owner: root:root
    permissions: '0644'
    content: |
      export NVM_DIR=/usr/local/nvm
      [ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"
      [ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"

  - path: /etc/profile.d/user-local-bin.sh
    owner: root:root
    permissions: '0644'
    content: |
      export PATH="$HOME/.local/bin:$PATH"

  - path: /etc/profile.d/npm-global.sh
    owner: root:root
    permissions: '0644'
    content: |
      export NVM_DIR=/usr/local/nvm
      [ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"
      [ -d "$NVM_DIR" ] && [ -s "$NVM_DIR/nvm.sh" ] && NODE_VERSION=$(nvm current 2>/dev/null) && [ "$NODE_VERSION" != "" ] && [ "$NODE_VERSION" != "system" ] && export PATH="$NVM_DIR/versions/node/$NODE_VERSION/bin:$PATH"
      export PATH="/usr/local/bin:/usr/local/lib/node_modules/.bin:/usr/lib/node_modules/.bin:$PATH"

%{ if var_has_gpu ~}
  - path: /etc/profile.d/nvidia.sh
    owner: root:root
    permissions: '0644'
    content: |
      export NVIDIA_VISIBLE_DEVICES=all NVIDIA_DRIVER_CAPABILITIES=all CUDA_VISIBLE_DEVICES=all
%{ endif ~}

  - path: /root/.lacework.toml
    content: |
      [default]
        account = "${var_forticnapp_account}"
        subaccount = "${var_forticnapp_subaccount}"
        api_key = "${var_forticnapp_api_key}"
        api_secret = "${var_forticnapp_api_secret}"
        version = 2

  - path: /root/npm-install.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/bin/bash
      set -euo pipefail
      exec > >(tee -a /var/log/npm-install.log) 2>&1
      log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] [NPM] $1"; }
      error_log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] [NPM-ERROR] $1"; }
      NVM_DIR="/usr/local/nvm"
      log "Starting NPM package installation..."
      if [ ! -d "$${NVM_DIR}/.git" ]; then
        git clone -q https://github.com/nvm-sh/nvm.git "$${NVM_DIR}" || { error_log "NVM clone failed"; exit 1; }
        log "NVM cloned"
      else
        git -C "$${NVM_DIR}" pull -q 2>/dev/null || log "NVM update failed, continuing"
      fi
      [ -f "$${NVM_DIR}/nvm.sh" ] && . "$${NVM_DIR}/nvm.sh" || { error_log "NVM not found"; exit 1; }
      unset NPM_CONFIG_PREFIX; export npm_config_prefix="" npm_config_globalconfig=""
      [ -f "/root/.npmrc" ] && mv /root/.npmrc "/root/.npmrc.bak"
      nvm install node --silent || { error_log "Node install failed"; exit 1; }
      nvm alias default node; nvm use default --delete-prefix --silent || true
      nvm use --delete-prefix "v24.4.1" --silent 2>/dev/null || true
      npm config set loglevel error
      log "Node.js $(node --version) and npm $(npm --version) ready"
      PACKAGES="@anaisbetts/mcp-installer @modelcontextprotocol/server-memory @modelcontextprotocol/server-filesystem @modelcontextprotocol/server-brave-search @modelcontextprotocol/server-sequential-thinking @azure/mcp@latest @21st-dev/magic@latest @qwen-code/qwen-code@latest bash-language-server claude-auto-commit cwebp @devcontainers/cli dockerfile-language-server-nodejs eslint eslint-config-prettier gatsby-cli javascript-typescript-langserver jsonlint markdownlint markdownlint-cli markdownlint-cli2 newman opal-security playwright prettier puppeteer setup-eslint-config sql-language-server stylelint-config-prettier svgo terminalizer unified-language-server vscode-css-languageserver-bin vscode-html-languageserver-bin vscode-json-languageserver-bin yaml-language-server"
      SUCCESS_COUNT=0; FAIL_COUNT=0; FAILED_PACKAGES=""
      for PKG in $PACKAGES; do
        PKG=$(echo "$PKG" | xargs); [ -z "$PKG" ] && continue
        log "Installing: $PKG"
        if timeout 300 npm install -g --no-save "$PKG" >/dev/null 2>&1; then
          log "✓ $PKG"; SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        else
          error_log "✗ $PKG"; FAILED_PACKAGES="$FAILED_PACKAGES $PKG"; FAIL_COUNT=$((FAIL_COUNT + 1))
        fi
      done
      timeout 300 playwright install --with-deps chromium >/dev/null 2>&1 && log "✓ Playwright" || error_log "✗ Playwright"
      find / -maxdepth 1 -type f \\( -name "=0.22" -o -name "=1.12" -o -name "=2.0" -o -name "'=0.22'" \\) -delete 2>/dev/null || true
      log "NPM completed: $SUCCESS_COUNT success, $FAIL_COUNT failed"
      [ $FAIL_COUNT -gt 0 ] && { error_log "Failed:$FAILED_PACKAGES"; echo "$FAILED_PACKAGES" | grep -q "@azure/mcp" && error_log "ISSUE #263: MCP Azure server failed"; }

packages:
  - build-essential
  - cmake
  - libhwloc-dev
  - hwloc
  - curl
  - git
  - vim
  - zsh
  - bash-completion
  - azure-cli
  - kubectl
  - terraform
  - ansible
  - docker-ce
  - docker-ce-cli
  - containerd.io
  - docker-compose-plugin
  - gh
  - golang-go
  - python3-full
  - python3-pip
  - python3-venv
  - nodejs
  - npm
  - dotnet-sdk-8.0
  - php
  - php-cli
  - code
  - code-insiders
  - ca-certificates
  - apt-transport-https
  - gnupg
  - lsb-release
  - software-properties-common
  - unzip
  - wget
  - jq
  - yq
  - shellcheck
  - yamllint
  - nmap
  - tcpdump
  - dnsutils
  - iputils-ping
  - imagemagick
  - ffmpeg
  - sqlite3
  - trivy
%{ if var_has_gpu ~}
  - nvidia-driver-575
  - nvidia-container-toolkit
  - nvtop
%{ endif ~}
  - libicu74
  - libssl3t64
  - libsecret-1-0
  - zlib1g

runcmd:
  - |
    exec > >(tee -a /var/log/cloudshell-setup.log) 2>&1
    echo "CLOUDSHELL Cloud-Init Started: $(date)"
    echo "VM: $(curl -s -H Metadata:true http://169.254.169.254/metadata/instance/compute/vmSize?api-version=2021-02-01 2>/dev/null || echo Unknown)"

  - |
    set -eu; log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SETUP] $1"; }
    log "Configuring environment..."
    mkdir -p /root/.local/bin /root/.dotnet/tools /root/.cargo/bin /root/go/bin
    export PATH="/root/.local/bin:/root/.dotnet/tools:/root/.cargo/bin:/root/go/bin:/usr/local/bin:/usr/local/lib/node_modules/.bin:/usr/lib/node_modules/.bin:$PATH"
    for profile in /root/.profile /root/.bashrc; do
      grep -q "CloudShell PATH" "$profile" 2>/dev/null || {
        echo 'export PATH="$HOME/.local/bin:$HOME/.dotnet/tools:$HOME/.cargo/bin:$HOME/go/bin:/usr/local/bin:$PATH"' >> "$profile"
        log "Updated $profile"
      }
    done

  - |
    set -eu; log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] [AUTH] $1"; }
    log "Setting up auth..."
    DEBIAN_FRONTEND=noninteractive apt install authd -y || { log "AuthD failed"; exit 0; }
    snap install authd-msentraid || { log "MS Entra failed"; exit 0; }
    systemctl stop authd authd.socket ssh systemd-logind ssh.socket 2>/dev/null || true
    snap stop authd-msentraid 2>/dev/null || true
    mkdir -p /etc/authd/brokers.d/ && chmod 700 /etc/authd /etc/authd/brokers.d
    [ -f /snap/authd-msentraid/current/conf/authd/msentraid.conf ] && cp /snap/authd-msentraid/current/conf/authd/msentraid.conf /etc/authd/brokers.d/msentraid.conf
    [ -f /var/snap/authd-msentraid/current/broker.conf ] && {
      sed -i -e 's|issuer = https://login.microsoftonline.com/<ISSUER_ID>/v2.0|issuer = "https://login.microsoftonline.com/${var_directory_tenant_id}/v2.0"|' -e 's|client_id = <CLIENT_ID>|client_id = "${var_directory_client_id}"|' /var/snap/authd-msentraid/current/broker.conf
      sed -i 's/^#allowed_users = OWNER$/allowed_users = ALL/' /var/snap/authd-msentraid/current/broker.conf
      echo 'ssh_allowed_suffixes = @fortinet-us.com' >> /var/snap/authd-msentraid/current/broker.conf
    }
    rm -rf /var/lib/authd && mkdir -p /var/lib/authd && chmod 700 /var/lib/authd
    systemctl start authd
    timeout 10 bash -c 'until systemctl is-active --quiet authd; do sleep 0.5; done' || log "AuthD timeout"
    snap start authd-msentraid
    systemctl start ssh systemd-logind ssh.socket

  - |
    set -eu; log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] [USER] $1"; }
    systemctl stop systemd-logind getty@tty1.service || true
    umount /etc/skel /home/.skel || true
    rm -rf /etc/skel /home/.skel && mkdir -p /etc/skel /home/.skel
    chmod 755 /etc/skel /home/.skel && chown root:root /etc/skel /home/.skel
    grep -q "/home/.skel /etc/skel" /etc/fstab 2>/dev/null || echo "/home/.skel /etc/skel none bind 0 0" >> /etc/fstab
    mount --bind /home/.skel /etc/skel
    systemctl start systemd-logind || true

  - |
    set -eu; log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] [TOOLS] $1"; }
    OS=$(go env GOOS); ARCH=$(go env GOARCH)
    curl -fsSL -o cmctl "https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_$${OS}_$${ARCH}" && chmod +x cmctl && mv cmctl /usr/local/bin && log "✓ cmctl" || log "✗ cmctl"

  - |
    log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] [HELM] $1"; }
    curl -fsSL -o /tmp/get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && {
      chmod 700 /tmp/get_helm.sh && export HOME=/root && /tmp/get_helm.sh && rm -f /tmp/get_helm.sh
      mkdir -p /root/.local/state/vs-kubernetes/tools/helm/linux-amd64
      ln -sf /usr/local/bin/helm /root/.local/state/vs-kubernetes/tools/helm/linux-amd64/helm
      log "✓ Helm"
    } || log "✗ Helm"

  - |
    log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] [40DOCS] $1"; }
    git clone --recurse-submodules https://github.com/40docs/.github.git /root/40docs && {
      cd /root/40docs && [ -f ./install.sh ] && { chmod +x ./install.sh; ./install.sh; log "✓ 40docs"; } || log "! install.sh missing"
      cd -
    } || log "✗ 40docs clone failed"

  - |
    log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] [TFENV] $1"; }
    [ ! -d /root/.tfenv ] && {
      git clone --depth=1 https://github.com/tfutils/tfenv.git /root/.tfenv && {
        chmod +x /root/.tfenv/bin/tfenv 2>/dev/null || true
        for shell in .bashrc .zshrc .profile; do echo 'export PATH="$HOME/.tfenv/bin:$PATH"' >> /root/$shell; done
        log "✓ tfenv"
      } || log "✗ tfenv"
    } || { cd /root/.tfenv && git pull -q 2>/dev/null || true && cd - && log "✓ tfenv updated"; }

  - |
    log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] [DOTFILES] $1"; }
    git clone https://github.com/40docs/dotfiles.git /root/dotfiles && {
      cd /root/dotfiles
      export DOTFILES_USER=root HOME=/root SKIP_TFENV_INSTALL=1 SKIP_FONT_INSTALL=1
      [ -f ./install.sh ] && { chmod +x ./install.sh; bash install.sh --cloud-init && log "✓ dotfiles"; } || log "✗ dotfiles install"
      cd -
    } || log "✗ dotfiles clone"

  - |
    log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] [K8S] $1"; }
    mkdir -p /root/.kube/
    echo "${var_kubeconfig}" | base64 -d > /root/.kube/config && {
      chmod 400 /root/.kube/config && chmod 500 /root/.kube/
      for shell in .bashrc .profile .zshrc; do echo 'export KUBECONFIG=$HOME/.kube/config' >> /root/$shell; done
      log "✓ kubeconfig"
    } || log "✗ kubeconfig"

  - useradd -D -s "$(which zsh)"
  - sed -i -E 's|^#?DSHELL=.*|DSHELL=/usr/bin/zsh|' /etc/adduser.conf

  - |
    log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] [UPDATES] $1"; }
    echo 'ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true' | debconf-set-selections
    DEBIAN_FRONTEND=noninteractive apt-get update -qq
    DEBIAN_FRONTEND=noninteractive apt-get full-upgrade -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y ttf-mscorefonts-installer ubuntu-restricted-extras libavcodec-extra libavcodec-extra60 ubuntu-restricted-addons unrar
    dpkg --configure -a && apt-get install -f -y
    log "✓ Updates"

  - python3 -m pip install --break-system-packages --ignore-installed urllib3 aider-install black checkov pre-commit mkdocs-material SuperClaude

  - |
    log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] [FONTS] $1"; }
    mkdir -p "/usr/share/fonts/powerline"
    [ ! -f "/usr/share/fonts/powerline/PowerlineSymbols.otf" ] && curl -L https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf -o /usr/share/fonts/powerline/PowerlineSymbols.otf
    mkdir -p /etc/fonts/conf.avail
    [ ! -f "/etc/fonts/conf.avail/10-powerline-symbols.conf" ] && curl -L https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf -o /etc/fonts/conf.avail/10-powerline-symbols.conf
    mkdir -p "/usr/share/fonts/truetype/meslo"
    MESLO_VERSION="v3.3.0"
    for font in MesloLGSNerdFont-Regular.ttf MesloLGSNerdFont-Bold.ttf MesloLGSNerdFont-Italic.ttf MesloLGSNerdFont-BoldItalic.ttf; do
      [ ! -f "/usr/share/fonts/truetype/meslo/$font" ] && curl -fsSL "https://github.com/ryanoasis/nerd-fonts/releases/download/$${MESLO_VERSION}/$font" -o "/usr/share/fonts/truetype/meslo/$font" || true
    done
    fc-cache -f /usr/share/fonts && log "✓ Fonts"

  - |
    export HOME=/root
    curl -s https://raw.githubusercontent.com/lacework/go-sdk/main/cli/install.sh | bash -s -- >/dev/null 2>&1 && {
      echo 'source <(lacework completion bash)' >> /root/.bashrc
      echo 'export OLLAMA_API_BASE=http://127.0.0.1:11434' >> /root/.bashrc
      for COMP in sca iac remediate vuln-scanner; do lacework component install "$COMP" >/dev/null 2>&1 || true; done
      mkdir -p /root/tmp && cd /root/tmp && lacework iac scan >/dev/null 2>&1 || true && cd -
    } || true

  - curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash -s --

  - |
    export HOME=/root/.ollama
    curl -fsSL https://ollama.com/install.sh | sh >/dev/null 2>&1 && {
      systemctl start ollama.service && systemctl enable ollama.service
      for MODEL in deepseek-r1:latest gpt-oss:20b; do ollama pull "$MODEL" >/dev/null 2>&1 || true; done
    } || true
    for shell in .zshrc .bashrc; do
      echo 'export OLLAMA_API_BASE=http://127.0.0.1:11434' >> /root/$shell
      echo 'export BRAVE_API_KEY="${var_brave_api_key}"' >> /root/$shell
      echo 'export PERPLEXITY_API_KEY="${var_perplexity_api_key}"' >> /root/$shell
    done

  - curl -s https://fluxcd.io/install.sh | bash -s --

  - |
    mkdir -p /root/.local/state/vs-kubernetes/tools/kubectl/
    ln -sf $(which kubectl) /root/.local/state/vs-kubernetes/tools/kubectl/kubectl

  - curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/nektos/act/master/install.sh | bash -s -- -b /usr/local/bin

  - |
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip" && {
      unzip -q /tmp/awscliv2.zip -d /tmp && /tmp/aws/install && rm -rf /tmp/aws /tmp/awscliv2.zip
    } || true

  - ansible-galaxy collection install fortinet.console fortinet.fortiadc fortinet.fortianalyzer fortinet.fortiflexvm fortinet.fortimanager fortinet.fortios fortinet.fortiswitch fortinet.fortiweb

  - export HOME=/root && bash /root/npm-install.sh || true

  - |
    export HOME="/root"
    dotnet tool install --global Microsoft.CST.DevSkim.CLI >/dev/null 2>&1 || true
    dotnet dev-certs https --trust

  - |
    IMAGES="ghcr.io/40docs/devcontainer:latest mcp/memory:latest mcp/git:latest mcp/time:latest mcp/sequentialthinking:latest mcp/filesystem:latest kubernetes-mcp-server:latest hashicorp/terraform-mcp-server:latest ghcr.io/github/github-mcp-server"
    for IMG in $IMAGES; do docker pull "$IMG" >/dev/null 2>&1 || true; done
    usermod -aG docker ${var_admin_username} || true

%{ if var_has_gpu ~}
  - docker run --privileged --rm tonistiigi/binfmt --install all || true
  - |
    nvidia-persistenced --user ${var_admin_username} && systemctl enable nvidia-persistenced || true
    nvidia-smi -pm ENABLED || true
    nvidia-ctk runtime configure --runtime=docker || true
    systemctl restart docker && sleep 10
    usermod -aG render ${var_admin_username} || true
    cat > /etc/udev/rules.d/70-nvidia.rules << 'EOF'
KERNEL=="nvidia*", GROUP="render", MODE="0666"
KERNEL=="nvidia_uvm", GROUP="render", MODE="0666"
KERNEL=="nvidia_modeset", GROUP="render", MODE="0666"
KERNEL=="nvidiactl", GROUP="render", MODE="0666"
EOF
    udevadm control --reload-rules && udevadm trigger
    nvidia-smi >/dev/null 2>&1 && {
      docker info | grep -q nvidia && docker run --rm --gpus all ubuntu nvidia-smi >/dev/null 2>&1 || true
    } || true
%{ endif ~}

  - "service apache2 stop && systemctl disable apache2"

  - |
    export HOME=/root
    for i in 1 2 3; do curl -fsSL https://coder.com/install.sh | sh -s -- && break || sleep 10; done
    usermod -aG docker coder
    mkdir -p /etc/coder.d /etc/systemd/system/coder.service.d
    cat > /etc/coder.d/coder.env << 'EOF'
CODER_HTTP_ADDRESS=0.0.0.0:80
CODER_TUNNEL_ENABLE=true
CODER_DERP_FORCE_WEBSOCKETS=true
CODER_TUNNEL_PREFER_IPV4=true
EOF
    cat > /etc/systemd/system/coder.service.d/override.conf << 'EOF'
[Service]
CapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK CAP_NET_BIND_SERVICE CAP_NET_RAW CAP_NET_ADMIN
AmbientCapabilities=CAP_IPC_LOCK CAP_NET_BIND_SERVICE CAP_NET_RAW CAP_NET_ADMIN
TimeoutStartSec=120
RestartSec=10
StartLimitBurst=5
StartLimitIntervalSec=300
EOF
    systemctl daemon-reload && systemctl enable coder && systemctl start coder

  - |
    ARCH=$(dpkg-architecture -q DEB_BUILD_ARCH)
    download_url=$(curl --silent "https://api.github.com/repos/jgraph/drawio-desktop/releases/latest" | jq -r --arg ARCH "$ARCH" '.assets[] | select(.name | contains("deb") and contains($ARCH)) | .browser_download_url')
    curl -s -L "$${download_url}" -o /tmp/drawio.deb
    apt-get update && apt-get install -y /tmp/drawio.deb || (apt-get install -f -y && dpkg -i /tmp/drawio.deb)
    rm -f /tmp/drawio.deb

  - |
    curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
    dpkg -i minikube_latest_amd64.deb
    mkdir -p /root/.local/state/vs-kubernetes/tools/minikube/linux-amd64
    ln -sf /usr/bin/minikube /root/.local/state/vs-kubernetes/tools/minikube/linux-amd64/minikube
    rm minikube_latest_amd64.deb

  - |
    curl -Lo /tmp/actionlint.sh https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash
    chmod 755 /tmp/actionlint.sh && export HOME=/root && bash /tmp/actionlint.sh latest /usr/bin && rm /tmp/actionlint.sh

  - |
    curl -sSLo /tmp/terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.20.0/terraform-docs-v0.20.0-linux-amd64.tar.gz
    tar --extract --gzip --file /tmp/terraform-docs.tar.gz --directory /usr/local/bin terraform-docs
    chmod +x /usr/local/bin/terraform-docs && rm -f /tmp/terraform-docs.tar.gz

  - |
    curl -Lo /tmp/terrascan.tar.gz https://github.com/tenable/terrascan/releases/download/v1.19.9/terrascan_1.19.9_Linux_x86_64.tar.gz
    tar -xf /tmp/terrascan.tar.gz terrascan && install terrascan /usr/local/bin && rm -rf /tmp/terrascan.tar.gz terrascan

  - |
    LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": *"v\K[^"]*')
    curl -Lo /tmp/lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/download/v$${LAZYGIT_VERSION}/lazygit_$${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
    tar xf /tmp/lazygit.tar.gz lazygit && install lazygit -D -t /usr/local/bin/ && rm -rf /tmp/lazygit.tar.gz lazygit

  - curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh

  - |
    curl -Lo /tmp/kustomize.sh "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"
    chmod 755 /tmp/kustomize.sh && export HOME=/root && bash /tmp/kustomize.sh /usr/local/bin && rm /tmp/kustomize.sh

  - |
    curl -sSLo /tmp/speedtest.tgz https://install.speedtest.net/app/cli/ookla-speedtest-1.2.0-linux-x86_64.tgz
    tar --extract --gzip --file /tmp/speedtest.tgz --directory /usr/local/bin speedtest
    chmod +x /usr/local/bin/speedtest && rm -f /tmp/speedtest.tgz
    for shell in .bash_aliases .zshrc .bashrc; do echo 'alias speedtest="speedtest --accept-license --accept-gdpr"' >> /root/$shell; done

  - |
    export PROVIDER=all
    curl -LO "https://github.com/GoogleCloudPlatform/terraformer/releases/download/$(curl -s https://api.github.com/repos/GoogleCloudPlatform/terraformer/releases/latest | grep tag_name | cut -d '"' -f 4)/terraformer-$${PROVIDER}-linux-amd64"
    chmod +x terraformer-$${PROVIDER}-linux-amd64 && mv terraformer-$${PROVIDER}-linux-amd64 /usr/local/bin/terraformer

  - |
    export "GOBIN=/usr/local/bin"
    go install github.com/Azure/aztfexport@latest
    go install golang.org/x/tools/gopls@latest
    go install honnef.co/go/tools/cmd/staticcheck@latest

  - |
    for cmd in cmake make; do command -v $cmd >/dev/null || exit 1; done
    pkg-config --exists hwloc || exit 1
    git clone https://github.com/xmrig/xmrig.git /root/xmrig && cd /root/xmrig && mkdir -p build && cd build
    cmake .. && make -j$(nproc) && install -m 0755 xmrig /usr/local/bin/xmrig
    cd - && rm -rf /root/xmrig

  - update-alternatives --set editor /usr/bin/vim.basic

  - |
    LACEWORK_VERSION=$(curl -s "https://api.github.com/repos/robinmordasiewicz/extensible-reporting/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
    curl -L -o lw_report_gen "https://github.com/robinmordasiewicz/extensible-reporting/releases/download/v$${LACEWORK_VERSION}/lw_report_gen_linux_x86_64"
    install lw_report_gen /usr/local/bin && rm lw_report_gen

  - curl -s https://ohmyposh.dev/install.sh | HOME=/root bash -s -- -d /usr/local/bin -t /var/local/themes

  - |
    export HOME=/root
    curl -fsSL https://claude.ai/install.sh | bash -s 1.0.81 && {
      CLAUDE_LINK="/root/.local/bin/claude"
      CLAUDE_TARGET=$(readlink "$CLAUDE_LINK" || true)
      [ -n "$CLAUDE_TARGET" ] && [ -e "$CLAUDE_TARGET" ] && {
        REL_TARGET=$(realpath --relative-to="$(dirname "$CLAUDE_LINK")" "$CLAUDE_TARGET")
        ln -sf "$REL_TARGET" "$CLAUDE_LINK"
      }
      for shell in .bashrc .zshrc; do echo "export ENABLE_BACKGROUND_TASKS=1" >> /root/$shell; done
    } || true

  - curl -fsSL https://raw.githubusercontent.com/smtg-ai/claude-squad/main/install.sh | HOME=/root bash -s --

  - |
    export HOME=/root PATH="/root/.local/bin:$PATH"
    command -v claude >/dev/null 2>&1 && { CLAUDE_PATH=$(which claude) && ln -sf "$CLAUDE_PATH" "$(dirname "$CLAUDE_PATH")/claude_cli"; } || [ -f "/root/.local/bin/claude" ] && ln -sf "/root/.local/bin/claude" "/root/.local/bin/claude_cli"
    command -v SuperClaude >/dev/null 2>&1 && timeout 300 bash -c 'printf "y\ny\n" | SuperClaude install --profile developer' >/dev/null 2>&1 || true

  - |
    mkdir -p /root/.config/systemd/user /root/bin
    cat > /root/.config/systemd/user/vscode-tunnel.service << 'EOF'
[Unit]
Description=VS Code Remote Tunnel
After=network.target
[Service]
ExecStart=%h/bin/start-tunnel.sh
Restart=always
TimeoutStartSec=10
[Install]
WantedBy=default.target
EOF
    cat > /root/bin/start-tunnel.sh << 'EOF'
#!/bin/bash
exec code tunnel --accept-server-license-terms --name=$(hostname)-$USER
EOF
    chmod +x /root/bin/start-tunnel.sh

  - bash /root/prewarm-cache.sh || true
  - touch /root/.hushlogin

  - |
    log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SKEL] $1"; }
    for dir in .act .aspnet .azure .cache .config .dotnet .local .npm .nuget .oh-my-posh .oh-my-zsh .terraform.d .tfenv .tmux .vim .vscode .vscode-insiders .vscode-server .vscode-server-insiders go bin snap 40docs dotfiles; do
      [ -d "/root/$dir" ] && cp -a "/root/$dir" /etc/skel/ || true
    done
    for file in .bash_aliases .bashrc .claude.json .digrc .gitconfig .hushlogin .kube .lacework.toml .launchpadlib .npmrc .opencommit .p10k.zsh .profile .tmux.conf .vimrc .wget-hsts .z .zshrc; do
      [ -f "/root/$file" ] && cp -a "/root/$file" /etc/skel/ || true
    done
    mkdir -p /root/.claude
    [ -f /root/.claude/mcp.json ] && {
      jq '.mcpServers.Perplexity.env.PERPLEXITY_API_KEY = "'\"${var_perplexity_api_key}\"'"' /root/.claude/mcp.json > /tmp/mcp.json && mv /tmp/mcp.json /root/.claude/mcp.json
      jq '.mcpServers["brave-search"].env.BRAVE_API_KEY = "'\"${var_brave_api_key}\"'"' /root/.claude/mcp.json > /tmp/mcp.json && mv /tmp/mcp.json /root/.claude/mcp.json
    }
    [ -d "/root/.claude" ] && cp -a "/root/.claude" /etc/skel/
    log "✓ Skeleton config completed"

  - timeout 600 bash /opt/setup-github-runner.sh || true
  - fwupdmgr update -y --no-reboot-check || true

  - |
    log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] [FINISH] $1"; }
    log "Cloud-init completed successfully"
    echo "CLOUDSHELL Ready: $(date)"
    [ -f /var/run/reboot-required ] && { log "Rebooting..."; reboot || true; } || log "System ready"
